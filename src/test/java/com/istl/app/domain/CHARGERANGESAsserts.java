package com.istl.app.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class CHARGERANGESAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCHARGERANGESAllPropertiesEquals(CHARGERANGES expected, CHARGERANGES actual) {
        assertCHARGERANGESAutoGeneratedPropertiesEquals(expected, actual);
        assertCHARGERANGESAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCHARGERANGESAllUpdatablePropertiesEquals(CHARGERANGES expected, CHARGERANGES actual) {
        assertCHARGERANGESUpdatableFieldsEquals(expected, actual);
        assertCHARGERANGESUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCHARGERANGESAutoGeneratedPropertiesEquals(CHARGERANGES expected, CHARGERANGES actual) {
        assertThat(expected)
            .as("Verify CHARGERANGES auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCHARGERANGESUpdatableFieldsEquals(CHARGERANGES expected, CHARGERANGES actual) {
        assertThat(expected)
            .as("Verify CHARGERANGES relevant properties")
            .satisfies(e -> assertThat(e.getbILLERID()).as("check bILLERID").isEqualTo(actual.getbILLERID()))
            .satisfies(e -> assertThat(e.getpROCESSINGCODE()).as("check pROCESSINGCODE").isEqualTo(actual.getpROCESSINGCODE()))
            .satisfies(e -> assertThat(e.getmAX()).as("check mAX").isEqualTo(actual.getmAX()))
            .satisfies(e -> assertThat(e.getmIN()).as("check mIN").isEqualTo(actual.getmIN()))
            .satisfies(e -> assertThat(e.getaMOUNT()).as("check aMOUNT").isEqualTo(actual.getaMOUNT()))
            .satisfies(e -> assertThat(e.getcREATEDBY()).as("check cREATEDBY").isEqualTo(actual.getcREATEDBY()))
            .satisfies(e -> assertThat(e.getaPPROVEDBY()).as("check aPPROVEDBY").isEqualTo(actual.getaPPROVEDBY()))
            .satisfies(e -> assertThat(e.getcREATEDAT()).as("check cREATEDAT").isEqualTo(actual.getcREATEDAT()))
            .satisfies(e -> assertThat(e.getaPPROVEDON()).as("check aPPROVEDON").isEqualTo(actual.getaPPROVEDON()))
            .satisfies(e -> assertThat(e.getaPPROVED()).as("check aPPROVED").isEqualTo(actual.getaPPROVED()))
            .satisfies(e -> assertThat(e.getdECLINED()).as("check dECLINED").isEqualTo(actual.getdECLINED()))
            .satisfies(e -> assertThat(e.getdECLINEDBY()).as("check dECLINEDBY").isEqualTo(actual.getdECLINEDBY()))
            .satisfies(e -> assertThat(e.getcHARGEID()).as("check cHARGEID").isEqualTo(actual.getcHARGEID()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCHARGERANGESUpdatableRelationshipsEquals(CHARGERANGES expected, CHARGERANGES actual) {
        // empty method
    }
}
