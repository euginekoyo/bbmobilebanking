package com.istl.app.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class BranchesAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBranchesAllPropertiesEquals(Branches expected, Branches actual) {
        assertBranchesAutoGeneratedPropertiesEquals(expected, actual);
        assertBranchesAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBranchesAllUpdatablePropertiesEquals(Branches expected, Branches actual) {
        assertBranchesUpdatableFieldsEquals(expected, actual);
        assertBranchesUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBranchesAutoGeneratedPropertiesEquals(Branches expected, Branches actual) {
        assertThat(expected)
            .as("Verify Branches auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBranchesUpdatableFieldsEquals(Branches expected, Branches actual) {
        assertThat(expected)
            .as("Verify Branches relevant properties")
            .satisfies(e -> assertThat(e.getBranchname()).as("check branchname").isEqualTo(actual.getBranchname()))
            .satisfies(e -> assertThat(e.getBranchcode()).as("check branchcode").isEqualTo(actual.getBranchcode()))
            .satisfies(e -> assertThat(e.getApproved()).as("check approved").isEqualTo(actual.getApproved()))
            .satisfies(e -> assertThat(e.getEmail()).as("check email").isEqualTo(actual.getEmail()))
            .satisfies(e -> assertThat(e.getAddress()).as("check address").isEqualTo(actual.getAddress()))
            .satisfies(e -> assertThat(e.getPhone()).as("check phone").isEqualTo(actual.getPhone()))
            .satisfies(e -> assertThat(e.getLocation()).as("check location").isEqualTo(actual.getLocation()))
            .satisfies(e -> assertThat(e.getContactperson()).as("check contactperson").isEqualTo(actual.getContactperson()))
            .satisfies(e -> assertThat(e.getRemarks()).as("check remarks").isEqualTo(actual.getRemarks()))
            .satisfies(e -> assertThat(e.getCreatedby()).as("check createdby").isEqualTo(actual.getCreatedby()))
            .satisfies(e -> assertThat(e.getCreatedon()).as("check createdon").isEqualTo(actual.getCreatedon()))
            .satisfies(e -> assertThat(e.getApprovedby()).as("check approvedby").isEqualTo(actual.getApprovedby()))
            .satisfies(e -> assertThat(e.getApprovedon()).as("check approvedon").isEqualTo(actual.getApprovedon()))
            .satisfies(e -> assertThat(e.getCheckerremarks()).as("check checkerremarks").isEqualTo(actual.getCheckerremarks()))
            .satisfies(e -> assertThat(e.getDeletedby()).as("check deletedby").isEqualTo(actual.getDeletedby()))
            .satisfies(e -> assertThat(e.getDeletedon()).as("check deletedon").isEqualTo(actual.getDeletedon()))
            .satisfies(e -> assertThat(e.getDeleteremarks()).as("check deleteremarks").isEqualTo(actual.getDeleteremarks()))
            .satisfies(e -> assertThat(e.getDeleted()).as("check deleted").isEqualTo(actual.getDeleted()))
            .satisfies(e -> assertThat(e.getDeclined()).as("check declined").isEqualTo(actual.getDeclined()))
            .satisfies(e -> assertThat(e.getDeclineddon()).as("check declineddon").isEqualTo(actual.getDeclineddon()))
            .satisfies(e -> assertThat(e.getDeclinedby()).as("check declinedby").isEqualTo(actual.getDeclinedby()))
            .satisfies(e -> assertThat(e.getSessionid()).as("check sessionid").isEqualTo(actual.getSessionid()))
            .satisfies(e -> assertThat(e.getReworked()).as("check reworked").isEqualTo(actual.getReworked()))
            .satisfies(e -> assertThat(e.getReworkedby()).as("check reworkedby").isEqualTo(actual.getReworkedby()))
            .satisfies(e -> assertThat(e.getReworkedon()).as("check reworkedon").isEqualTo(actual.getReworkedon()))
            .satisfies(e -> assertThat(e.getDistrict()).as("check district").isEqualTo(actual.getDistrict()))
            .satisfies(e -> assertThat(e.getRegion()).as("check region").isEqualTo(actual.getRegion()))
            .satisfies(e -> assertThat(e.getRegionname()).as("check regionname").isEqualTo(actual.getRegionname()))
            .satisfies(e -> assertThat(e.getReporting()).as("check reporting").isEqualTo(actual.getReporting()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBranchesUpdatableRelationshipsEquals(Branches expected, Branches actual) {
        // empty method
    }
}
