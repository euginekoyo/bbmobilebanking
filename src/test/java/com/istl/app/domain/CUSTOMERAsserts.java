package com.istl.app.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class CUSTOMERAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCUSTOMERAllPropertiesEquals(CUSTOMER expected, CUSTOMER actual) {
        assertCUSTOMERAutoGeneratedPropertiesEquals(expected, actual);
        assertCUSTOMERAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCUSTOMERAllUpdatablePropertiesEquals(CUSTOMER expected, CUSTOMER actual) {
        assertCUSTOMERUpdatableFieldsEquals(expected, actual);
        assertCUSTOMERUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCUSTOMERAutoGeneratedPropertiesEquals(CUSTOMER expected, CUSTOMER actual) {
        assertThat(expected)
            .as("Verify CUSTOMER auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCUSTOMERUpdatableFieldsEquals(CUSTOMER expected, CUSTOMER actual) {
        assertThat(expected)
            .as("Verify CUSTOMER relevant properties")
            .satisfies(e -> assertThat(e.getcUSTOMERNAME()).as("check cUSTOMERNAME").isEqualTo(actual.getcUSTOMERNAME()))
            .satisfies(e -> assertThat(e.getpHONENUMBER()).as("check pHONENUMBER").isEqualTo(actual.getpHONENUMBER()))
            .satisfies(e -> assertThat(e.getcARDNUMBER()).as("check cARDNUMBER").isEqualTo(actual.getcARDNUMBER()))
            .satisfies(e -> assertThat(e.getaCCOUNTNUMBER()).as("check aCCOUNTNUMBER").isEqualTo(actual.getaCCOUNTNUMBER()))
            .satisfies(e -> assertThat(e.getlANG()).as("check lANG").isEqualTo(actual.getlANG()))
            .satisfies(e -> assertThat(e.getpIN()).as("check pIN").isEqualTo(actual.getpIN()))
            .satisfies(e -> assertThat(e.getfIRSTLOGIN()).as("check fIRSTLOGIN").isEqualTo(actual.getfIRSTLOGIN()))
            .satisfies(e -> assertThat(e.getaCTIVE()).as("check aCTIVE").isEqualTo(actual.getaCTIVE()))
            .satisfies(e -> assertThat(e.getrEGISTERED()).as("check rEGISTERED").isEqualTo(actual.getrEGISTERED()))
            .satisfies(e -> assertThat(e.getcSTDELETE()).as("check cSTDELETE").isEqualTo(actual.getcSTDELETE()))
            .satisfies(e -> assertThat(e.getrEGDATE()).as("check rEGDATE").isEqualTo(actual.getrEGDATE()))
            .satisfies(e -> assertThat(e.getaLERTENABLED()).as("check aLERTENABLED").isEqualTo(actual.getaLERTENABLED()))
            .satisfies(e -> assertThat(e.getrEMARK()).as("check rEMARK").isEqualTo(actual.getrEMARK()))
            .satisfies(e -> assertThat(e.getiMSI()).as("check iMSI").isEqualTo(actual.getiMSI()))
            .satisfies(e ->
                assertThat(e.getpARTIALLYREGISTERED()).as("check pARTIALLYREGISTERED").isEqualTo(actual.getpARTIALLYREGISTERED())
            )
            .satisfies(e -> assertThat(e.getpARTIALDATE()).as("check pARTIALDATE").isEqualTo(actual.getpARTIALDATE()))
            .satisfies(e -> assertThat(e.getrEGISTERDATE()).as("check rEGISTERDATE").isEqualTo(actual.getrEGISTERDATE()))
            .satisfies(e -> assertThat(e.getaPPROVED()).as("check aPPROVED").isEqualTo(actual.getaPPROVED()))
            .satisfies(e -> assertThat(e.getaPPROVEDBY()).as("check aPPROVEDBY").isEqualTo(actual.getaPPROVEDBY()))
            .satisfies(e -> assertThat(e.getaPPROVEDDATE()).as("check aPPROVEDDATE").isEqualTo(actual.getaPPROVEDDATE()))
            .satisfies(e -> assertThat(e.getdECLINED()).as("check dECLINED").isEqualTo(actual.getdECLINED()))
            .satisfies(e -> assertThat(e.getdECLINEDBY()).as("check dECLINEDBY").isEqualTo(actual.getdECLINEDBY()))
            .satisfies(e -> assertThat(e.getdECLINEDDATE()).as("check dECLINEDDATE").isEqualTo(actual.getdECLINEDDATE()))
            .satisfies(e -> assertThat(e.getcHECKERREMARKS()).as("check cHECKERREMARKS").isEqualTo(actual.getcHECKERREMARKS()))
            .satisfies(e -> assertThat(e.getpOSTALADDRESS()).as("check pOSTALADDRESS").isEqualTo(actual.getpOSTALADDRESS()))
            .satisfies(e -> assertThat(e.getrESIDENCE()).as("check rESIDENCE").isEqualTo(actual.getrESIDENCE()))
            .satisfies(e -> assertThat(e.getdOB()).as("check dOB").isEqualTo(actual.getdOB()))
            .satisfies(e -> assertThat(e.getcREATEDBY()).as("check cREATEDBY").isEqualTo(actual.getcREATEDBY()))
            .satisfies(e -> assertThat(e.geteMAILADDRESS()).as("check eMAILADDRESS").isEqualTo(actual.geteMAILADDRESS()))
            .satisfies(e -> assertThat(e.getiDENTIFICATIONID()).as("check iDENTIFICATIONID").isEqualTo(actual.getiDENTIFICATIONID()))
            .satisfies(e -> assertThat(e.getaDDACCOUNT()).as("check aDDACCOUNT").isEqualTo(actual.getaDDACCOUNT()))
            .satisfies(e ->
                assertThat(e.getaCLINKINGINSTITUTION()).as("check aCLINKINGINSTITUTION").isEqualTo(actual.getaCLINKINGINSTITUTION())
            )
            .satisfies(e -> assertThat(e.getdEACTIVATED()).as("check dEACTIVATED").isEqualTo(actual.getdEACTIVATED()))
            .satisfies(e -> assertThat(e.getdEACTIVATEDBY()).as("check dEACTIVATEDBY").isEqualTo(actual.getdEACTIVATEDBY()))
            .satisfies(e -> assertThat(e.getdEACTIVATEDON()).as("check dEACTIVATEDON").isEqualTo(actual.getdEACTIVATEDON()))
            .satisfies(e -> assertThat(e.getpHONENOCHANGED()).as("check pHONENOCHANGED").isEqualTo(actual.getpHONENOCHANGED()))
            .satisfies(e -> assertThat(e.getpHONENOCHANGEDBY()).as("check pHONENOCHANGEDBY").isEqualTo(actual.getpHONENOCHANGEDBY()))
            .satisfies(e -> assertThat(e.getpHONENOCHANGEDON()).as("check pHONENOCHANGEDON").isEqualTo(actual.getpHONENOCHANGEDON()))
            .satisfies(e -> assertThat(e.getoRIGINALPHONENO()).as("check oRIGINALPHONENO").isEqualTo(actual.getoRIGINALPHONENO()))
            .satisfies(e -> assertThat(e.getnEWPHONENO()).as("check nEWPHONENO").isEqualTo(actual.getnEWPHONENO()))
            .satisfies(e -> assertThat(e.getrESET()).as("check rESET").isEqualTo(actual.getrESET()))
            .satisfies(e ->
                assertThat(e.getrESETINGINSTITUTION()).as("check rESETINGINSTITUTION").isEqualTo(actual.getrESETINGINSTITUTION())
            )
            .satisfies(e -> assertThat(e.getpINRESETREMARK()).as("check pINRESETREMARK").isEqualTo(actual.getpINRESETREMARK()))
            .satisfies(e -> assertThat(e.getrESETBY()).as("check rESETBY").isEqualTo(actual.getrESETBY()))
            .satisfies(e -> assertThat(e.getrESETON()).as("check rESETON").isEqualTo(actual.getrESETON()))
            .satisfies(e ->
                assertThat(e.getuNBLOCKINGINSTITUTION()).as("check uNBLOCKINGINSTITUTION").isEqualTo(actual.getuNBLOCKINGINSTITUTION())
            )
            .satisfies(e -> assertThat(e.getpINBLOCK()).as("check pINBLOCK").isEqualTo(actual.getpINBLOCK()))
            .satisfies(e -> assertThat(e.getpINBLOCKBY()).as("check pINBLOCKBY").isEqualTo(actual.getpINBLOCKBY()))
            .satisfies(e -> assertThat(e.getpINBLOCKREMARKS()).as("check pINBLOCKREMARKS").isEqualTo(actual.getpINBLOCKREMARKS()))
            .satisfies(e ->
                assertThat(e.getbLOCKINGINSTITUTION()).as("check bLOCKINGINSTITUTION").isEqualTo(actual.getbLOCKINGINSTITUTION())
            )
            .satisfies(e -> assertThat(e.getpINBLOCKON()).as("check pINBLOCKON").isEqualTo(actual.getpINBLOCKON()))
            .satisfies(e -> assertThat(e.getaPPROVEDON()).as("check aPPROVEDON").isEqualTo(actual.getaPPROVEDON()))
            .satisfies(e -> assertThat(e.getpINUNBLOCKBY()).as("check pINUNBLOCKBY").isEqualTo(actual.getpINUNBLOCKBY()))
            .satisfies(e -> assertThat(e.getlOGGEDIN()).as("check lOGGEDIN").isEqualTo(actual.getlOGGEDIN()))
            .satisfies(e -> assertThat(e.gettRIALS()).as("check tRIALS").isEqualTo(actual.gettRIALS()))
            .satisfies(e -> assertThat(e.getiDTYPE()).as("check iDTYPE").isEqualTo(actual.getiDTYPE()))
            .satisfies(e -> assertThat(e.getiDNUMBER()).as("check iDNUMBER").isEqualTo(actual.getiDNUMBER()))
            .satisfies(e -> assertThat(e.getgENDER()).as("check gENDER").isEqualTo(actual.getgENDER()))
            .satisfies(e -> assertThat(e.getcIF()).as("check cIF").isEqualTo(actual.getcIF()))
            .satisfies(e -> assertThat(e.getdATEOFBIRTH()).as("check dATEOFBIRTH").isEqualTo(actual.getdATEOFBIRTH()))
            .satisfies(e -> assertThat(e.getrEMARKS()).as("check rEMARKS").isEqualTo(actual.getrEMARKS()))
            .satisfies(e -> assertThat(e.getrESETIMSI()).as("check rESETIMSI").isEqualTo(actual.getrESETIMSI()))
            .satisfies(e -> assertThat(e.getiMSIRESETBY()).as("check iMSIRESETBY").isEqualTo(actual.getiMSIRESETBY()))
            .satisfies(e -> assertThat(e.getfIRSTNAME()).as("check fIRSTNAME").isEqualTo(actual.getfIRSTNAME()))
            .satisfies(e -> assertThat(e.getsECONDNAME()).as("check sECONDNAME").isEqualTo(actual.getsECONDNAME()))
            .satisfies(e -> assertThat(e.getlASTNAME()).as("check lASTNAME").isEqualTo(actual.getlASTNAME()))
            .satisfies(e -> assertThat(e.getpINBLOCKTIME()).as("check pINBLOCKTIME").isEqualTo(actual.getpINBLOCKTIME()))
            .satisfies(e -> assertThat(e.getcUSTOMERSTATUS()).as("check cUSTOMERSTATUS").isEqualTo(actual.getcUSTOMERSTATUS()))
            .satisfies(e -> assertThat(e.getuSERNAME()).as("check uSERNAME").isEqualTo(actual.getuSERNAME()))
            .satisfies(e -> assertThat(e.getpASSWORD()).as("check pASSWORD").isEqualTo(actual.getpASSWORD()))
            .satisfies(e -> assertThat(e.getdEVICEID()).as("check dEVICEID").isEqualTo(actual.getdEVICEID()))
            .satisfies(e -> assertThat(e.getcHANNEL()).as("check cHANNEL").isEqualTo(actual.getcHANNEL()))
            .satisfies(e -> assertThat(e.getpASSRESET()).as("check pASSRESET").isEqualTo(actual.getpASSRESET()))
            .satisfies(e -> assertThat(e.getpASSRESETBY()).as("check pASSRESETBY").isEqualTo(actual.getpASSRESETBY()))
            .satisfies(e -> assertThat(e.getpASSRESETON()).as("check pASSRESETON").isEqualTo(actual.getpASSRESETON()))
            .satisfies(e -> assertThat(e.getpASSBLOCK()).as("check pASSBLOCK").isEqualTo(actual.getpASSBLOCK()))
            .satisfies(e -> assertThat(e.getpASSBLOCKBY()).as("check pASSBLOCKBY").isEqualTo(actual.getpASSBLOCKBY()))
            .satisfies(e -> assertThat(e.getpASSBLOCKON()).as("check pASSBLOCKON").isEqualTo(actual.getpASSBLOCKON()))
            .satisfies(e -> assertThat(e.getpINMARKBLOCK()).as("check pINMARKBLOCK").isEqualTo(actual.getpINMARKBLOCK()))
            .satisfies(e -> assertThat(e.getpASSMARKBLOCK()).as("check pASSMARKBLOCK").isEqualTo(actual.getpASSMARKBLOCK()))
            .satisfies(e -> assertThat(e.getpASSRESETREMARKS()).as("check pASSRESETREMARKS").isEqualTo(actual.getpASSRESETREMARKS()))
            .satisfies(e -> assertThat(e.getpASSBLOCKREMARKS()).as("check pASSBLOCKREMARKS").isEqualTo(actual.getpASSBLOCKREMARKS()))
            .satisfies(e -> assertThat(e.getpASSUNBLOCKBY()).as("check pASSUNBLOCKBY").isEqualTo(actual.getpASSUNBLOCKBY()))
            .satisfies(e -> assertThat(e.getpASSTRIALS()).as("check pASSTRIALS").isEqualTo(actual.getpASSTRIALS()))
            .satisfies(e -> assertThat(e.getaPPACTIVE()).as("check aPPACTIVE").isEqualTo(actual.getaPPACTIVE()))
            .satisfies(e -> assertThat(e.getlASTLOGIN()).as("check lASTLOGIN").isEqualTo(actual.getlASTLOGIN()))
            .satisfies(e -> assertThat(e.getaPPMARKEDDISABLE()).as("check aPPMARKEDDISABLE").isEqualTo(actual.getaPPMARKEDDISABLE()))
            .satisfies(e -> assertThat(e.getdISABLEBY()).as("check dISABLEBY").isEqualTo(actual.getdISABLEBY()))
            .satisfies(e -> assertThat(e.getaPPROVEDISABLEBY()).as("check aPPROVEDISABLEBY").isEqualTo(actual.getaPPROVEDISABLEBY()))
            .satisfies(e -> assertThat(e.getaPPMARKEDENABLE()).as("check aPPMARKEDENABLE").isEqualTo(actual.getaPPMARKEDENABLE()))
            .satisfies(e -> assertThat(e.geteNABLEBY()).as("check eNABLEBY").isEqualTo(actual.geteNABLEBY()))
            .satisfies(e -> assertThat(e.getaPPROVEDENABLEBY()).as("check aPPROVEDENABLEBY").isEqualTo(actual.getaPPROVEDENABLEBY()))
            .satisfies(e -> assertThat(e.getmARKEDDEACTIVATE()).as("check mARKEDDEACTIVATE").isEqualTo(actual.getmARKEDDEACTIVATE()))
            .satisfies(e -> assertThat(e.getaPPFIRSTLOGIN()).as("check aPPFIRSTLOGIN").isEqualTo(actual.getaPPFIRSTLOGIN()))
            .satisfies(e -> assertThat(e.getaTMTRIALS()).as("check aTMTRIALS").isEqualTo(actual.getaTMTRIALS()))
            .satisfies(e -> assertThat(e.getsHORCUTS()).as("check sHORCUTS").isEqualTo(actual.getsHORCUTS()))
            .satisfies(e -> assertThat(e.getmARKEDACTIVATE()).as("check mARKEDACTIVATE").isEqualTo(actual.getmARKEDACTIVATE()))
            .satisfies(e -> assertThat(e.gettOWN()).as("check tOWN").isEqualTo(actual.gettOWN()))
            .satisfies(e -> assertThat(e.getaPPROVEDDISABLEON()).as("check aPPROVEDDISABLEON").isEqualTo(actual.getaPPROVEDDISABLEON()))
            .satisfies(e -> assertThat(e.getdISABLEDON()).as("check dISABLEDON").isEqualTo(actual.getdISABLEDON()))
            .satisfies(e -> assertThat(e.getrESETAPPROVEON()).as("check rESETAPPROVEON").isEqualTo(actual.getrESETAPPROVEON()))
            .satisfies(e -> assertThat(e.getdELETEDBY()).as("check dELETEDBY").isEqualTo(actual.getdELETEDBY()))
            .satisfies(e -> assertThat(e.getqUESTIONSASKED()).as("check qUESTIONSASKED").isEqualTo(actual.getqUESTIONSASKED()))
            .satisfies(e -> assertThat(e.getqUESTIONSTRIALS()).as("check qUESTIONSTRIALS").isEqualTo(actual.getqUESTIONSTRIALS()))
            .satisfies(e -> assertThat(e.getqUESTIONSANSWERED()).as("check qUESTIONSANSWERED").isEqualTo(actual.getqUESTIONSANSWERED()))
            .satisfies(e -> assertThat(e.getvALIDOTP()).as("check vALIDOTP").isEqualTo(actual.getvALIDOTP()))
            .satisfies(e -> assertThat(e.getaCTIVATEDBY()).as("check aCTIVATEDBY").isEqualTo(actual.getaCTIVATEDBY()))
            .satisfies(e -> assertThat(e.getaCTIVATEDON()).as("check aCTIVATEDON").isEqualTo(actual.getaCTIVATEDON()))
            .satisfies(e -> assertThat(e.getbRANCHCODE()).as("check bRANCHCODE").isEqualTo(actual.getbRANCHCODE()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCUSTOMERUpdatableRelationshipsEquals(CUSTOMER expected, CUSTOMER actual) {
        // empty method
    }
}
