package com.istl.app.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class LIMITSAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLIMITSAllPropertiesEquals(LIMITS expected, LIMITS actual) {
        assertLIMITSAutoGeneratedPropertiesEquals(expected, actual);
        assertLIMITSAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLIMITSAllUpdatablePropertiesEquals(LIMITS expected, LIMITS actual) {
        assertLIMITSUpdatableFieldsEquals(expected, actual);
        assertLIMITSUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLIMITSAutoGeneratedPropertiesEquals(LIMITS expected, LIMITS actual) {
        assertThat(expected)
            .as("Verify LIMITS auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLIMITSUpdatableFieldsEquals(LIMITS expected, LIMITS actual) {
        assertThat(expected)
            .as("Verify LIMITS relevant properties")
            .satisfies(e -> assertThat(e.gettRANSACTIONTYPE()).as("check tRANSACTIONTYPE").isEqualTo(actual.gettRANSACTIONTYPE()))
            .satisfies(e -> assertThat(e.getpROCODE()).as("check pROCODE").isEqualTo(actual.getpROCODE()))
            .satisfies(e -> assertThat(e.getcHANNEL()).as("check cHANNEL").isEqualTo(actual.getcHANNEL()))
            .satisfies(e -> assertThat(e.gettRANSACTIONLIMIT()).as("check tRANSACTIONLIMIT").isEqualTo(actual.gettRANSACTIONLIMIT()))
            .satisfies(e -> assertThat(e.getdAILYLIMIT()).as("check dAILYLIMIT").isEqualTo(actual.getdAILYLIMIT()))
            .satisfies(e -> assertThat(e.getrEGISTEREDBY()).as("check rEGISTEREDBY").isEqualTo(actual.getrEGISTEREDBY()))
            .satisfies(e -> assertThat(e.getrEGISTEREDDATE()).as("check rEGISTEREDDATE").isEqualTo(actual.getrEGISTEREDDATE()))
            .satisfies(e -> assertThat(e.getaPPROVED()).as("check aPPROVED").isEqualTo(actual.getaPPROVED()))
            .satisfies(e -> assertThat(e.getaPPROVEDBY()).as("check aPPROVEDBY").isEqualTo(actual.getaPPROVEDBY()))
            .satisfies(e -> assertThat(e.getaPPROVEDDATE()).as("check aPPROVEDDATE").isEqualTo(actual.getaPPROVEDDATE()))
            .satisfies(e -> assertThat(e.getuPDATEDBY()).as("check uPDATEDBY").isEqualTo(actual.getuPDATEDBY()))
            .satisfies(e -> assertThat(e.getuPDATEDDATE()).as("check uPDATEDDATE").isEqualTo(actual.getuPDATEDDATE()))
            .satisfies(e -> assertThat(e.getrEWORK()).as("check rEWORK").isEqualTo(actual.getrEWORK()))
            .satisfies(e -> assertThat(e.getrEWORKBY()).as("check rEWORKBY").isEqualTo(actual.getrEWORKBY()))
            .satisfies(e -> assertThat(e.getsESSIONID()).as("check sESSIONID").isEqualTo(actual.getsESSIONID()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLIMITSUpdatableRelationshipsEquals(LIMITS expected, LIMITS actual) {
        // empty method
    }
}
