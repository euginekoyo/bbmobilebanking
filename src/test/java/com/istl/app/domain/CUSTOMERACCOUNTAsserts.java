package com.istl.app.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class CustomerAccountAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCustomerAccountAllPropertiesEquals(CustomerAccount expected, CustomerAccount actual) {
        assertCustomerAccountAutoGeneratedPropertiesEquals(expected, actual);
        assertCustomerAccountAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCustomerAccountAllUpdatablePropertiesEquals(CustomerAccount expected, CustomerAccount actual) {
        assertCustomerAccountUpdatableFieldsEquals(expected, actual);
        assertCustomerAccountUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCustomerAccountAutoGeneratedPropertiesEquals(CustomerAccount expected, CustomerAccount actual) {
        assertThat(expected)
            .as("Verify CustomerAccount auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCustomerAccountUpdatableFieldsEquals(CustomerAccount expected, CustomerAccount actual) {
        assertThat(expected)
            .as("Verify CustomerAccount relevant properties")
            .satisfies(e -> assertThat(e.getCustomerid()).as("check customerid").isEqualTo(actual.getCustomerid()))
            .satisfies(e -> assertThat(e.getAccountnumber()).as("check accountnumber").isEqualTo(actual.getAccountnumber()))
            .satisfies(e -> assertThat(e.getAccountclass()).as("check accountclass").isEqualTo(actual.getAccountclass()))
            .satisfies(e -> assertThat(e.getCustomernumber()).as("check customernumber").isEqualTo(actual.getCustomernumber()))
            .satisfies(e -> assertThat(e.getCif()).as("check cif").isEqualTo(actual.getCif()))
            .satisfies(e -> assertThat(e.getTimelinked()).as("check timelinked").isEqualTo(actual.getTimelinked()))
            .satisfies(e -> assertThat(e.getBlocked()).as("check blocked").isEqualTo(actual.getBlocked()))
            .satisfies(e -> assertThat(e.getStopped()).as("check stopped").isEqualTo(actual.getStopped()))
            .satisfies(e -> assertThat(e.getDormant()).as("check dormant").isEqualTo(actual.getDormant()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCustomerAccountUpdatableRelationshipsEquals(CustomerAccount expected, CustomerAccount actual) {
        // empty method
    }
}
