package com.istl.app.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class PINRESETHISTORYAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPINRESETHISTORYAllPropertiesEquals(PINRESETHISTORY expected, PINRESETHISTORY actual) {
        assertPINRESETHISTORYAutoGeneratedPropertiesEquals(expected, actual);
        assertPINRESETHISTORYAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPINRESETHISTORYAllUpdatablePropertiesEquals(PINRESETHISTORY expected, PINRESETHISTORY actual) {
        assertPINRESETHISTORYUpdatableFieldsEquals(expected, actual);
        assertPINRESETHISTORYUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPINRESETHISTORYAutoGeneratedPropertiesEquals(PINRESETHISTORY expected, PINRESETHISTORY actual) {
        assertThat(expected)
            .as("Verify PINRESETHISTORY auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPINRESETHISTORYUpdatableFieldsEquals(PINRESETHISTORY expected, PINRESETHISTORY actual) {
        assertThat(expected)
            .as("Verify PINRESETHISTORY relevant properties")
            .satisfies(e -> assertThat(e.getpHONENUMBER()).as("check pHONENUMBER").isEqualTo(actual.getpHONENUMBER()))
            .satisfies(e -> assertThat(e.getcUSTOMERNAME()).as("check cUSTOMERNAME").isEqualTo(actual.getcUSTOMERNAME()))
            .satisfies(e -> assertThat(e.getpINBLOCKEDON()).as("check pINBLOCKEDON").isEqualTo(actual.getpINBLOCKEDON()))
            .satisfies(e -> assertThat(e.getpINBLOCKREMARKS()).as("check pINBLOCKREMARKS").isEqualTo(actual.getpINBLOCKREMARKS()))
            .satisfies(e -> assertThat(e.getpINRESETBY()).as("check pINRESETBY").isEqualTo(actual.getpINRESETBY()))
            .satisfies(e -> assertThat(e.getpINRESETON()).as("check pINRESETON").isEqualTo(actual.getpINRESETON()))
            .satisfies(e -> assertThat(e.getpINRESETAPPROVEDBY()).as("check pINRESETAPPROVEDBY").isEqualTo(actual.getpINRESETAPPROVEDBY()))
            .satisfies(e -> assertThat(e.getpINRESETAPPROVEDON()).as("check pINRESETAPPROVEDON").isEqualTo(actual.getpINRESETAPPROVEDON()))
            .satisfies(e -> assertThat(e.getpINRESETREMARKS()).as("check pINRESETREMARKS").isEqualTo(actual.getpINRESETREMARKS()))
            .satisfies(e -> assertThat(e.getbRANCHCODE()).as("check bRANCHCODE").isEqualTo(actual.getbRANCHCODE()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPINRESETHISTORYUpdatableRelationshipsEquals(PINRESETHISTORY expected, PINRESETHISTORY actual) {
        // empty method
    }
}
