package com.istl.app.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class TRANSACTIONSAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTRANSACTIONSAllPropertiesEquals(TRANSACTIONS expected, TRANSACTIONS actual) {
        assertTRANSACTIONSAutoGeneratedPropertiesEquals(expected, actual);
        assertTRANSACTIONSAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTRANSACTIONSAllUpdatablePropertiesEquals(TRANSACTIONS expected, TRANSACTIONS actual) {
        assertTRANSACTIONSUpdatableFieldsEquals(expected, actual);
        assertTRANSACTIONSUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTRANSACTIONSAutoGeneratedPropertiesEquals(TRANSACTIONS expected, TRANSACTIONS actual) {
        assertThat(expected)
            .as("Verify TRANSACTIONS auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTRANSACTIONSUpdatableFieldsEquals(TRANSACTIONS expected, TRANSACTIONS actual) {
        assertThat(expected)
            .as("Verify TRANSACTIONS relevant properties")
            .satisfies(e -> assertThat(e.getpROCESSED()).as("check pROCESSED").isEqualTo(actual.getpROCESSED()))
            .satisfies(e -> assertThat(e.getiNCOMINGBITMAP()).as("check iNCOMINGBITMAP").isEqualTo(actual.getiNCOMINGBITMAP()))
            .satisfies(e -> assertThat(e.getoUTGOINGBITMAP()).as("check oUTGOINGBITMAP").isEqualTo(actual.getoUTGOINGBITMAP()))
            .satisfies(e -> assertThat(e.getiNMESSAGE()).as("check iNMESSAGE").isEqualTo(actual.getiNMESSAGE()))
            .satisfies(e -> assertThat(e.getmESSAGETOCBS()).as("check mESSAGETOCBS").isEqualTo(actual.getmESSAGETOCBS()))
            .satisfies(e -> assertThat(e.getmESSAGEFROMCBS()).as("check mESSAGEFROMCBS").isEqualTo(actual.getmESSAGEFROMCBS()))
            .satisfies(e -> assertThat(e.getcBSPROCESS()).as("check cBSPROCESS").isEqualTo(actual.getcBSPROCESS()))
            .satisfies(e -> assertThat(e.getcBSONLINE()).as("check cBSONLINE").isEqualTo(actual.getcBSONLINE()))
            .satisfies(e -> assertThat(e.getcBSRESPONSE()).as("check cBSRESPONSE").isEqualTo(actual.getcBSRESPONSE()))
            .satisfies(e -> assertThat(e.getrESPONSEMESSAGE()).as("check rESPONSEMESSAGE").isEqualTo(actual.getrESPONSEMESSAGE()))
            .satisfies(e -> assertThat(e.getrESPONSESENT()).as("check rESPONSESENT").isEqualTo(actual.getrESPONSESENT()))
            .satisfies(e -> assertThat(e.getcHANNEL()).as("check cHANNEL").isEqualTo(actual.getcHANNEL()))
            .satisfies(e -> assertThat(e.getoRIGINALDATA()).as("check oRIGINALDATA").isEqualTo(actual.getoRIGINALDATA()))
            .satisfies(e -> assertThat(e.getfIELD39RESP()).as("check fIELD39RESP").isEqualTo(actual.getfIELD39RESP()))
            .satisfies(e -> assertThat(e.getnARRATION()).as("check nARRATION").isEqualTo(actual.getnARRATION()))
            .satisfies(e -> assertThat(e.getaUTHORISED()).as("check aUTHORISED").isEqualTo(actual.getaUTHORISED()))
            .satisfies(e -> assertThat(e.getbRANCHCODE()).as("check bRANCHCODE").isEqualTo(actual.getbRANCHCODE()))
            .satisfies(e -> assertThat(e.getfIELD39ORIGINAL()).as("check fIELD39ORIGINAL").isEqualTo(actual.getfIELD39ORIGINAL()))
            .satisfies(e -> assertThat(e.getmESSAGECLASS()).as("check mESSAGECLASS").isEqualTo(actual.getmESSAGECLASS()))
            .satisfies(e -> assertThat(e.gettXNCODE()).as("check tXNCODE").isEqualTo(actual.gettXNCODE()))
            .satisfies(e -> assertThat(e.getcURRCODE()).as("check cURRCODE").isEqualTo(actual.getcURRCODE()))
            .satisfies(e -> assertThat(e.getdEVICE()).as("check dEVICE").isEqualTo(actual.getdEVICE()))
            .satisfies(e -> assertThat(e.getbRANCH2()).as("check bRANCH2").isEqualTo(actual.getbRANCH2()))
            .satisfies(e -> assertThat(e.getLongERBRANCH()).as("check longERBRANCH").isEqualTo(actual.getLongERBRANCH()))
            .satisfies(e -> assertThat(e.getdATEX()).as("check dATEX").isEqualTo(actual.getdATEX()))
            .satisfies(e -> assertThat(e.gettIMEX()).as("check tIMEX").isEqualTo(actual.gettIMEX()))
            .satisfies(e -> assertThat(e.getpOSTED()).as("check pOSTED").isEqualTo(actual.getpOSTED()))
            .satisfies(e -> assertThat(e.getaTTEMPTS()).as("check aTTEMPTS").isEqualTo(actual.getaTTEMPTS()))
            .satisfies(e -> assertThat(e.getoRIGINALDATA2()).as("check oRIGINALDATA2").isEqualTo(actual.getoRIGINALDATA2()))
            .satisfies(e -> assertThat(e.getcOMMISSION()).as("check cOMMISSION").isEqualTo(actual.getcOMMISSION()))
            .satisfies(e -> assertThat(e.getrESPONSECREATED()).as("check rESPONSECREATED").isEqualTo(actual.getrESPONSECREATED()))
            .satisfies(e -> assertThat(e.getoNLINE()).as("check oNLINE").isEqualTo(actual.getoNLINE()))
            .satisfies(e -> assertThat(e.getoRIGINALDATA3()).as("check oRIGINALDATA3").isEqualTo(actual.getoRIGINALDATA3()))
            .satisfies(e -> assertThat(e.gettOSWITCH()).as("check tOSWITCH").isEqualTo(actual.gettOSWITCH()))
            .satisfies(e -> assertThat(e.getfROMSWITCH()).as("check fROMSWITCH").isEqualTo(actual.getfROMSWITCH()))
            .satisfies(e -> assertThat(e.gettOCBS()).as("check tOCBS").isEqualTo(actual.gettOCBS()))
            .satisfies(e -> assertThat(e.getfROMCBS()).as("check fROMCBS").isEqualTo(actual.getfROMCBS()))
            .satisfies(e -> assertThat(e.getpOSTINGLEGS()).as("check pOSTINGLEGS").isEqualTo(actual.getpOSTINGLEGS()))
            .satisfies(e -> assertThat(e.getcOMMISSIONTXNCODE()).as("check cOMMISSIONTXNCODE").isEqualTo(actual.getcOMMISSIONTXNCODE()))
            .satisfies(e -> assertThat(e.gethOSTREF()).as("check hOSTREF").isEqualTo(actual.gethOSTREF()))
            .satisfies(e -> assertThat(e.getrEQUESTCREATED()).as("check rEQUESTCREATED").isEqualTo(actual.getrEQUESTCREATED()))
            .satisfies(e -> assertThat(e.getrEQUESTMESSAGE()).as("check rEQUESTMESSAGE").isEqualTo(actual.getrEQUESTMESSAGE()))
            .satisfies(e -> assertThat(e.getoUTGOINGBITMAPFLEX()).as("check oUTGOINGBITMAPFLEX").isEqualTo(actual.getoUTGOINGBITMAPFLEX()))
            .satisfies(e -> assertThat(e.getiNCOMINGBITMAPFLEX()).as("check iNCOMINGBITMAPFLEX").isEqualTo(actual.getiNCOMINGBITMAPFLEX()))
            .satisfies(e -> assertThat(e.getrEQUESTSENT()).as("check rEQUESTSENT").isEqualTo(actual.getrEQUESTSENT()))
            .satisfies(e -> assertThat(e.getmINICBS()).as("check mINICBS").isEqualTo(actual.getmINICBS()))
            .satisfies(e -> assertThat(e.getrEVERSED()).as("check rEVERSED").isEqualTo(actual.getrEVERSED()))
            .satisfies(e -> assertThat(e.getoFFLINESENTTOHOST()).as("check oFFLINESENTTOHOST").isEqualTo(actual.getoFFLINESENTTOHOST()))
            .satisfies(e -> assertThat(e.getoFFLINERESPONSE()).as("check oFFLINERESPONSE").isEqualTo(actual.getoFFLINERESPONSE()))
            .satisfies(e -> assertThat(e.getsOURCELongERFACE()).as("check sOURCELongERFACE").isEqualTo(actual.getsOURCELongERFACE()))
            .satisfies(e -> assertThat(e.getmTIRRN()).as("check mTIRRN").isEqualTo(actual.getmTIRRN()))
            .satisfies(e -> assertThat(e.gethOSTRESPONSECODE()).as("check hOSTRESPONSECODE").isEqualTo(actual.gethOSTRESPONSECODE()))
            .satisfies(e -> assertThat(e.getfIELD48()).as("check fIELD48").isEqualTo(actual.getfIELD48()))
            .satisfies(e -> assertThat(e.getsOURCE()).as("check sOURCE").isEqualTo(actual.getsOURCE()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTRANSACTIONSUpdatableRelationshipsEquals(TRANSACTIONS expected, TRANSACTIONS actual) {
        // empty method
    }
}
