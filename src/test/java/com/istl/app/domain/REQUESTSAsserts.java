package com.istl.app.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class REQUESTSAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertREQUESTSAllPropertiesEquals(REQUESTS expected, REQUESTS actual) {
        assertREQUESTSAutoGeneratedPropertiesEquals(expected, actual);
        assertREQUESTSAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertREQUESTSAllUpdatablePropertiesEquals(REQUESTS expected, REQUESTS actual) {
        assertREQUESTSUpdatableFieldsEquals(expected, actual);
        assertREQUESTSUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertREQUESTSAutoGeneratedPropertiesEquals(REQUESTS expected, REQUESTS actual) {
        assertThat(expected)
            .as("Verify REQUESTS auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertREQUESTSUpdatableFieldsEquals(REQUESTS expected, REQUESTS actual) {
        assertThat(expected)
            .as("Verify REQUESTS relevant properties")
            .satisfies(e -> assertThat(e.getmOBILENUMBER()).as("check mOBILENUMBER").isEqualTo(actual.getmOBILENUMBER()))
            .satisfies(e -> assertThat(e.getaCCOUNTNO()).as("check aCCOUNTNO").isEqualTo(actual.getaCCOUNTNO()))
            .satisfies(e -> assertThat(e.getcURRENCY()).as("check cURRENCY").isEqualTo(actual.getcURRENCY()))
            .satisfies(e -> assertThat(e.getcIF()).as("check cIF").isEqualTo(actual.getcIF()))
            .satisfies(e -> assertThat(e.getrEQUESTTYPE()).as("check rEQUESTTYPE").isEqualTo(actual.getrEQUESTTYPE()))
            .satisfies(e -> assertThat(e.getrEQUESTCHARGE()).as("check rEQUESTCHARGE").isEqualTo(actual.getrEQUESTCHARGE()))
            .satisfies(e -> assertThat(e.getrEQUESTSTATUS()).as("check rEQUESTSTATUS").isEqualTo(actual.getrEQUESTSTATUS()))
            .satisfies(e -> assertThat(e.getdATEREQUESTED()).as("check dATEREQUESTED").isEqualTo(actual.getdATEREQUESTED()))
            .satisfies(e -> assertThat(e.gettRNREFNO()).as("check tRNREFNO").isEqualTo(actual.gettRNREFNO()))
            .satisfies(e -> assertThat(e.getnOOFBOOKS()).as("check nOOFBOOKS").isEqualTo(actual.getnOOFBOOKS()))
            .satisfies(e -> assertThat(e.getnOOFLEAVES()).as("check nOOFLEAVES").isEqualTo(actual.getnOOFLEAVES()))
            .satisfies(e -> assertThat(e.getaPPROVED()).as("check aPPROVED").isEqualTo(actual.getaPPROVED()))
            .satisfies(e -> assertThat(e.getcHANNEL()).as("check cHANNEL").isEqualTo(actual.getcHANNEL()))
            .satisfies(e -> assertThat(e.getaPPROVEDBY()).as("check aPPROVEDBY").isEqualTo(actual.getaPPROVEDBY()))
            .satisfies(e -> assertThat(e.getaPPROVEDON()).as("check aPPROVEDON").isEqualTo(actual.getaPPROVEDON()))
            .satisfies(e -> assertThat(e.getcHECKERREMARKS()).as("check cHECKERREMARKS").isEqualTo(actual.getcHECKERREMARKS()))
            .satisfies(e -> assertThat(e.getrESPCODE()).as("check rESPCODE").isEqualTo(actual.getrESPCODE()))
            .satisfies(e -> assertThat(e.getrESPDESCRIPTION()).as("check rESPDESCRIPTION").isEqualTo(actual.getrESPDESCRIPTION()))
            .satisfies(e -> assertThat(e.getdATERESPONDED()).as("check dATERESPONDED").isEqualTo(actual.getdATERESPONDED()))
            .satisfies(e -> assertThat(e.getcUSTOMERNAME()).as("check cUSTOMERNAME").isEqualTo(actual.getcUSTOMERNAME()))
            .satisfies(e -> assertThat(e.getrEJECTED()).as("check rEJECTED").isEqualTo(actual.getrEJECTED()))
            .satisfies(e -> assertThat(e.getrEJECTEDBY()).as("check rEJECTEDBY").isEqualTo(actual.getrEJECTEDBY()))
            .satisfies(e -> assertThat(e.getrEJECTEDON()).as("check rEJECTEDON").isEqualTo(actual.getrEJECTEDON()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertREQUESTSUpdatableRelationshipsEquals(REQUESTS expected, REQUESTS actual) {
        // empty method
    }
}
