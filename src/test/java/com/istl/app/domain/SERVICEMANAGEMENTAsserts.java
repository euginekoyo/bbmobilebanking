package com.istl.app.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class SERVICEMANAGEMENTAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSERVICEMANAGEMENTAllPropertiesEquals(SERVICEMANAGEMENT expected, SERVICEMANAGEMENT actual) {
        assertSERVICEMANAGEMENTAutoGeneratedPropertiesEquals(expected, actual);
        assertSERVICEMANAGEMENTAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSERVICEMANAGEMENTAllUpdatablePropertiesEquals(SERVICEMANAGEMENT expected, SERVICEMANAGEMENT actual) {
        assertSERVICEMANAGEMENTUpdatableFieldsEquals(expected, actual);
        assertSERVICEMANAGEMENTUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSERVICEMANAGEMENTAutoGeneratedPropertiesEquals(SERVICEMANAGEMENT expected, SERVICEMANAGEMENT actual) {
        assertThat(expected)
            .as("Verify SERVICEMANAGEMENT auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSERVICEMANAGEMENTUpdatableFieldsEquals(SERVICEMANAGEMENT expected, SERVICEMANAGEMENT actual) {
        assertThat(expected)
            .as("Verify SERVICEMANAGEMENT relevant properties")
            .satisfies(e -> assertThat(e.getpROCESSINGCODE()).as("check pROCESSINGCODE").isEqualTo(actual.getpROCESSINGCODE()))
            .satisfies(e -> assertThat(e.getaCTIVE()).as("check aCTIVE").isEqualTo(actual.getaCTIVE()))
            .satisfies(e -> assertThat(e.getcREATEDBY()).as("check cREATEDBY").isEqualTo(actual.getcREATEDBY()))
            .satisfies(e -> assertThat(e.getdATECREATED()).as("check dATECREATED").isEqualTo(actual.getdATECREATED()))
            .satisfies(e -> assertThat(e.getaPPROVED()).as("check aPPROVED").isEqualTo(actual.getaPPROVED()))
            .satisfies(e -> assertThat(e.getaPPROVEDBY()).as("check aPPROVEDBY").isEqualTo(actual.getaPPROVEDBY()))
            .satisfies(e -> assertThat(e.getaPPROVEDDATE()).as("check aPPROVEDDATE").isEqualTo(actual.getaPPROVEDDATE()))
            .satisfies(e -> assertThat(e.getaDAPTORTYPE()).as("check aDAPTORTYPE").isEqualTo(actual.getaDAPTORTYPE()))
            .satisfies(e -> assertThat(e.getdESTINATION()).as("check dESTINATION").isEqualTo(actual.getdESTINATION()))
            .satisfies(e -> assertThat(e.gettHIRDPARTYRESPONSE()).as("check tHIRDPARTYRESPONSE").isEqualTo(actual.gettHIRDPARTYRESPONSE()))
            .satisfies(e -> assertThat(e.gettELCO()).as("check tELCO").isEqualTo(actual.gettELCO()))
            .satisfies(e -> assertThat(e.getdESCRIPTION()).as("check dESCRIPTION").isEqualTo(actual.getdESCRIPTION()))
            .satisfies(e -> assertThat(e.getrEMARKS()).as("check rEMARKS").isEqualTo(actual.getrEMARKS()))
            .satisfies(e -> assertThat(e.getsESSIONID()).as("check sESSIONID").isEqualTo(actual.getsESSIONID()))
            .satisfies(e -> assertThat(e.getrEWORKBY()).as("check rEWORKBY").isEqualTo(actual.getrEWORKBY()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSERVICEMANAGEMENTUpdatableRelationshipsEquals(SERVICEMANAGEMENT expected, SERVICEMANAGEMENT actual) {
        // empty method
    }
}
