package com.istl.app.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class BILLERSAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBILLERSAllPropertiesEquals(BILLERS expected, BILLERS actual) {
        assertBILLERSAutoGeneratedPropertiesEquals(expected, actual);
        assertBILLERSAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBILLERSAllUpdatablePropertiesEquals(BILLERS expected, BILLERS actual) {
        assertBILLERSUpdatableFieldsEquals(expected, actual);
        assertBILLERSUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBILLERSAutoGeneratedPropertiesEquals(BILLERS expected, BILLERS actual) {
        assertThat(expected)
            .as("Verify BILLERS auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBILLERSUpdatableFieldsEquals(BILLERS expected, BILLERS actual) {
        assertThat(expected)
            .as("Verify BILLERS relevant properties")
            .satisfies(e -> assertThat(e.getbILLERID()).as("check bILLERID").isEqualTo(actual.getbILLERID()))
            .satisfies(e -> assertThat(e.getdESCRIPTION()).as("check dESCRIPTION").isEqualTo(actual.getdESCRIPTION()))
            .satisfies(e ->
                assertThat(e.getbILLERCOLLECTIONACCOUNT())
                    .as("check bILLERCOLLECTIONACCOUNT")
                    .isEqualTo(actual.getbILLERCOLLECTIONACCOUNT())
            )
            .satisfies(e -> assertThat(e.getdATECREATED()).as("check dATECREATED").isEqualTo(actual.getdATECREATED()))
            .satisfies(e -> assertThat(e.getcREATEDBY()).as("check cREATEDBY").isEqualTo(actual.getcREATEDBY()))
            .satisfies(e -> assertThat(e.getaPPROVED()).as("check aPPROVED").isEqualTo(actual.getaPPROVED()))
            .satisfies(e -> assertThat(e.getaPPROVEDBY()).as("check aPPROVEDBY").isEqualTo(actual.getaPPROVEDBY()))
            .satisfies(e -> assertThat(e.getaPPROVEDDATE()).as("check aPPROVEDDATE").isEqualTo(actual.getaPPROVEDDATE()))
            .satisfies(e -> assertThat(e.getcHARGABLEPRODUCTID()).as("check cHARGABLEPRODUCTID").isEqualTo(actual.getcHARGABLEPRODUCTID()))
            .satisfies(e ->
                assertThat(e.getnONCHARGABLEPRODUCTID()).as("check nONCHARGABLEPRODUCTID").isEqualTo(actual.getnONCHARGABLEPRODUCTID())
            )
            .satisfies(e ->
                assertThat(e.getuSDBILLERCOLLECTIONACCOUNT())
                    .as("check uSDBILLERCOLLECTIONACCOUNT")
                    .isEqualTo(actual.getuSDBILLERCOLLECTIONACCOUNT())
            )
            .satisfies(e ->
                assertThat(e.geteNABLEDUPLICATECHECK()).as("check eNABLEDUPLICATECHECK").isEqualTo(actual.geteNABLEDUPLICATECHECK())
            )
            .satisfies(e -> assertThat(e.getrEMARKS()).as("check rEMARKS").isEqualTo(actual.getrEMARKS()))
            .satisfies(e -> assertThat(e.getsESSIONID()).as("check sESSIONID").isEqualTo(actual.getsESSIONID()))
            .satisfies(e -> assertThat(e.getrEWORKBY()).as("check rEWORKBY").isEqualTo(actual.getrEWORKBY()))
            .satisfies(e -> assertThat(e.getsTATUS()).as("check sTATUS").isEqualTo(actual.getsTATUS()))
            .satisfies(e -> assertThat(e.getaCTIVE()).as("check aCTIVE").isEqualTo(actual.getaCTIVE()))
            .satisfies(e -> assertThat(e.getrEWORK()).as("check rEWORK").isEqualTo(actual.getrEWORK()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBILLERSUpdatableRelationshipsEquals(BILLERS expected, BILLERS actual) {
        // empty method
    }
}
