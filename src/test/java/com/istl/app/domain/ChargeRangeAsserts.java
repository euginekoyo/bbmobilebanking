package com.istl.app.domain;

import static org.assertj.core.api.Assertions.assertThat;

import com.istl.app.domain.mobileapp.ChargeRange;

public class ChargeRangeAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertChargeRangeAllPropertiesEquals(ChargeRange expected, ChargeRange actual) {
        assertChargeRangeAutoGeneratedPropertiesEquals(expected, actual);
        assertChargeRangeAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertChargeRangeAllUpdatablePropertiesEquals(ChargeRange expected, ChargeRange actual) {
        assertChargeRangeUpdatableFieldsEquals(expected, actual);
        assertChargeRangeUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertChargeRangeAutoGeneratedPropertiesEquals(ChargeRange expected, ChargeRange actual) {
        assertThat(expected)
            .as("Verify ChargeRange auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertChargeRangeUpdatableFieldsEquals(ChargeRange expected, ChargeRange actual) {
        assertThat(expected)
            .as("Verify ChargeRange relevant properties")
            .satisfies(e -> assertThat(e.getBillerid()).as("check billerid").isEqualTo(actual.getBillerid()))
            .satisfies(e -> assertThat(e.getProcessingcode()).as("check processingcode").isEqualTo(actual.getProcessingcode()))
            .satisfies(e -> assertThat(e.getMax()).as("check max").isEqualTo(actual.getMax()))
            .satisfies(e -> assertThat(e.getMin()).as("check min").isEqualTo(actual.getMin()))
            .satisfies(e -> assertThat(e.getAmount()).as("check amount").isEqualTo(actual.getAmount()))
            .satisfies(e -> assertThat(e.getCreatedby()).as("check createdby").isEqualTo(actual.getCreatedby()))
            .satisfies(e -> assertThat(e.getApprovedby()).as("check approvedby").isEqualTo(actual.getApprovedby()))
            .satisfies(e -> assertThat(e.getCreatedat()).as("check createdat").isEqualTo(actual.getCreatedat()))
            .satisfies(e -> assertThat(e.getApprovedon()).as("check approvedon").isEqualTo(actual.getApprovedon()))
            .satisfies(e -> assertThat(e.getApproved()).as("check approved").isEqualTo(actual.getApproved()))
            .satisfies(e -> assertThat(e.getDeclined()).as("check declined").isEqualTo(actual.getDeclined()))
            .satisfies(e -> assertThat(e.getDeclinedby()).as("check declinedby").isEqualTo(actual.getDeclinedby()))
            .satisfies(e -> assertThat(e.getChargeid()).as("check chargeid").isEqualTo(actual.getChargeid()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertChargeRangeUpdatableRelationshipsEquals(ChargeRange expected, ChargeRange actual) {
        // empty method
    }
}
