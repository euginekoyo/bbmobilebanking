package com.istl.app.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class LINKEDACCOUNTSAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLINKEDACCOUNTSAllPropertiesEquals(LINKEDACCOUNTS expected, LINKEDACCOUNTS actual) {
        assertLINKEDACCOUNTSAutoGeneratedPropertiesEquals(expected, actual);
        assertLINKEDACCOUNTSAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLINKEDACCOUNTSAllUpdatablePropertiesEquals(LINKEDACCOUNTS expected, LINKEDACCOUNTS actual) {
        assertLINKEDACCOUNTSUpdatableFieldsEquals(expected, actual);
        assertLINKEDACCOUNTSUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLINKEDACCOUNTSAutoGeneratedPropertiesEquals(LINKEDACCOUNTS expected, LINKEDACCOUNTS actual) {
        assertThat(expected)
            .as("Verify LINKEDACCOUNTS auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLINKEDACCOUNTSUpdatableFieldsEquals(LINKEDACCOUNTS expected, LINKEDACCOUNTS actual) {
        assertThat(expected)
            .as("Verify LINKEDACCOUNTS relevant properties")
            .satisfies(e -> assertThat(e.getaCOUNTNAME()).as("check aCOUNTNAME").isEqualTo(actual.getaCOUNTNAME()))
            .satisfies(e -> assertThat(e.getaCCOUNTCLASS()).as("check aCCOUNTCLASS").isEqualTo(actual.getaCCOUNTCLASS()))
            .satisfies(e -> assertThat(e.getaCCOUNTCURRENCY()).as("check aCCOUNTCURRENCY").isEqualTo(actual.getaCCOUNTCURRENCY()))
            .satisfies(e -> assertThat(e.getaCCOUNTNUMBER()).as("check aCCOUNTNUMBER").isEqualTo(actual.getaCCOUNTNUMBER()))
            .satisfies(e -> assertThat(e.getcIF()).as("check cIF").isEqualTo(actual.getcIF()))
            .satisfies(e -> assertThat(e.gettIMELINKED()).as("check tIMELINKED").isEqualTo(actual.gettIMELINKED()))
            .satisfies(e -> assertThat(e.getpHONENUMBER()).as("check pHONENUMBER").isEqualTo(actual.getpHONENUMBER()))
            .satisfies(e -> assertThat(e.getaPPROVEDON()).as("check aPPROVEDON").isEqualTo(actual.getaPPROVEDON()))
            .satisfies(e -> assertThat(e.getaPPROVED()).as("check aPPROVED").isEqualTo(actual.getaPPROVED()))
            .satisfies(e -> assertThat(e.getdECLINED()).as("check dECLINED").isEqualTo(actual.getdECLINED()))
            .satisfies(e -> assertThat(e.getdECLINEDON()).as("check dECLINEDON").isEqualTo(actual.getdECLINEDON()))
            .satisfies(e -> assertThat(e.getrEMARKS()).as("check rEMARKS").isEqualTo(actual.getrEMARKS()))
            .satisfies(e -> assertThat(e.getlINKEDBY()).as("check lINKEDBY").isEqualTo(actual.getlINKEDBY()))
            .satisfies(e -> assertThat(e.getaPPROVEDBY()).as("check aPPROVEDBY").isEqualTo(actual.getaPPROVEDBY()))
            .satisfies(e -> assertThat(e.getlINKED()).as("check lINKED").isEqualTo(actual.getlINKED()))
            .satisfies(e -> assertThat(e.getaCTIVE()).as("check aCTIVE").isEqualTo(actual.getaCTIVE()))
            .satisfies(e -> assertThat(e.getdELINKEDBY()).as("check dELINKEDBY").isEqualTo(actual.getdELINKEDBY()))
            .satisfies(e -> assertThat(e.getdELINKEDON()).as("check dELINKEDON").isEqualTo(actual.getdELINKEDON()))
            .satisfies(e -> assertThat(e.getdELINKED()).as("check dELINKED").isEqualTo(actual.getdELINKED()))
            .satisfies(e -> assertThat(e.getaCCOUNTALIAS()).as("check aCCOUNTALIAS").isEqualTo(actual.getaCCOUNTALIAS()))
            .satisfies(e -> assertThat(e.getsHORTCUTS()).as("check sHORTCUTS").isEqualTo(actual.getsHORTCUTS()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLINKEDACCOUNTSUpdatableRelationshipsEquals(LINKEDACCOUNTS expected, LINKEDACCOUNTS actual) {
        // empty method
    }
}
