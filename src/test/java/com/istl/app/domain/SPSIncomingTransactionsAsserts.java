package com.istl.app.domain;

import static org.assertj.core.api.Assertions.assertThat;

import com.istl.app.domain.middleware.SPSIncomingTransactions;

public class SPSIncomingTransactionsAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSPSIncomingTransactionsAllPropertiesEquals(SPSIncomingTransactions expected, SPSIncomingTransactions actual) {
        assertSPSIncomingTransactionsAutoGeneratedPropertiesEquals(expected, actual);
        assertSPSIncomingTransactionsAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSPSIncomingTransactionsAllUpdatablePropertiesEquals(
        SPSIncomingTransactions expected,
        SPSIncomingTransactions actual
    ) {
        assertSPSIncomingTransactionsUpdatableFieldsEquals(expected, actual);
        assertSPSIncomingTransactionsUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSPSIncomingTransactionsAutoGeneratedPropertiesEquals(
        SPSIncomingTransactions expected,
        SPSIncomingTransactions actual
    ) {
        assertThat(expected)
            .as("Verify SPSIncomingTransactions auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSPSIncomingTransactionsUpdatableFieldsEquals(
        SPSIncomingTransactions expected,
        SPSIncomingTransactions actual
    ) {
        assertThat(expected)
            .as("Verify SPSIncomingTransactions relevant properties")
            .satisfies(e -> assertThat(e.getMessageid()).as("check messageid").isEqualTo(actual.getMessageid()))
            .satisfies(e -> assertThat(e.getChannelcode()).as("check channelcode").isEqualTo(actual.getChannelcode()))
            .satisfies(e -> assertThat(e.getCallbackurl()).as("check callbackurl").isEqualTo(actual.getCallbackurl()))
            .satisfies(e -> assertThat(e.getMessagetype()).as("check messagetype").isEqualTo(actual.getMessagetype()))
            .satisfies(e -> assertThat(e.getTranscurrency()).as("check transcurrency").isEqualTo(actual.getTranscurrency()))
            .satisfies(e -> assertThat(e.getDebtorsname()).as("check debtorsname").isEqualTo(actual.getDebtorsname()))
            .satisfies(e -> assertThat(e.getDebtorsaccountid()).as("check debtorsaccountid").isEqualTo(actual.getDebtorsaccountid()))
            .satisfies(e -> assertThat(e.getDebtorsbankcode()).as("check debtorsbankcode").isEqualTo(actual.getDebtorsbankcode()))
            .satisfies(e -> assertThat(e.getDebtorsphone()).as("check debtorsphone").isEqualTo(actual.getDebtorsphone()))
            .satisfies(e -> assertThat(e.getBeneficiaryname()).as("check beneficiaryname").isEqualTo(actual.getBeneficiaryname()))
            .satisfies(e ->
                assertThat(e.getBeneficiaryaccountid()).as("check beneficiaryaccountid").isEqualTo(actual.getBeneficiaryaccountid())
            )
            .satisfies(e ->
                assertThat(e.getBeneficiarybankcode()).as("check beneficiarybankcode").isEqualTo(actual.getBeneficiarybankcode())
            )
            .satisfies(e -> assertThat(e.getBeneficiaryphone()).as("check beneficiaryphone").isEqualTo(actual.getBeneficiaryphone()))
            .satisfies(e -> assertThat(e.getNarration()).as("check narration").isEqualTo(actual.getNarration()))
            .satisfies(e -> assertThat(e.getExternalreference()).as("check externalreference").isEqualTo(actual.getExternalreference()))
            .satisfies(e -> assertThat(e.getCbsreference()).as("check cbsreference").isEqualTo(actual.getCbsreference()))
            .satisfies(e -> assertThat(e.getMessageendtoendid()).as("check messageendtoendid").isEqualTo(actual.getMessageendtoendid()))
            .satisfies(e -> assertThat(e.getTransactionstatus()).as("check transactionstatus").isEqualTo(actual.getTransactionstatus()))
            .satisfies(e ->
                assertThat(e.getTransactionstatusdesc()).as("check transactionstatusdesc").isEqualTo(actual.getTransactionstatusdesc())
            )
            .satisfies(e -> assertThat(e.getSpsstatus()).as("check spsstatus").isEqualTo(actual.getSpsstatus()))
            .satisfies(e -> assertThat(e.getSpsstatusdesc()).as("check spsstatusdesc").isEqualTo(actual.getSpsstatusdesc()))
            .satisfies(e -> assertThat(e.getCbsstatus()).as("check cbsstatus").isEqualTo(actual.getCbsstatus()))
            .satisfies(e -> assertThat(e.getCbsstatusdesc()).as("check cbsstatusdesc").isEqualTo(actual.getCbsstatusdesc()))
            .satisfies(e -> assertThat(e.getRequestInstanttime()).as("check requestInstanttime").isEqualTo(actual.getRequestInstanttime()))
            .satisfies(e -> assertThat(e.getIsomessagetype()).as("check isomessagetype").isEqualTo(actual.getIsomessagetype()))
            .satisfies(e -> assertThat(e.getRequestjson()).as("check requestjson").isEqualTo(actual.getRequestjson()))
            .satisfies(e -> assertThat(e.getSpsrequestxml()).as("check spsrequestxml").isEqualTo(actual.getSpsrequestxml()))
            .satisfies(e -> assertThat(e.getSpsresponsexml()).as("check spsresponsexml").isEqualTo(actual.getSpsresponsexml()))
            .satisfies(e -> assertThat(e.getAmount()).as("check amount").isEqualTo(actual.getAmount()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSPSIncomingTransactionsUpdatableRelationshipsEquals(
        SPSIncomingTransactions expected,
        SPSIncomingTransactions actual
    ) {
        // empty method
    }
}
