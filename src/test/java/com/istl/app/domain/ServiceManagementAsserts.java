package com.istl.app.domain;

import static org.assertj.core.api.Assertions.assertThat;

import com.istl.app.domain.mobileapp.ServiceManagement;

public class ServiceManagementAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertServiceManagementAllPropertiesEquals(ServiceManagement expected, ServiceManagement actual) {
        assertServiceManagementAutoGeneratedPropertiesEquals(expected, actual);
        assertServiceManagementAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertServiceManagementAllUpdatablePropertiesEquals(ServiceManagement expected, ServiceManagement actual) {
        assertServiceManagementUpdatableFieldsEquals(expected, actual);
        assertServiceManagementUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertServiceManagementAutoGeneratedPropertiesEquals(ServiceManagement expected, ServiceManagement actual) {
        assertThat(expected)
            .as("Verify ServiceManagement auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertServiceManagementUpdatableFieldsEquals(ServiceManagement expected, ServiceManagement actual) {
        assertThat(expected)
            .as("Verify ServiceManagement relevant properties")
            .satisfies(e -> assertThat(e.getProcessingcode()).as("check processingcode").isEqualTo(actual.getProcessingcode()))
            .satisfies(e -> assertThat(e.getActive()).as("check active").isEqualTo(actual.getActive()))
            .satisfies(e -> assertThat(e.getCreatedby()).as("check createdby").isEqualTo(actual.getCreatedby()))
            .satisfies(e -> assertThat(e.getDatecreated()).as("check datecreated").isEqualTo(actual.getDatecreated()))
            .satisfies(e -> assertThat(e.getApproved()).as("check approved").isEqualTo(actual.getApproved()))
            .satisfies(e -> assertThat(e.getApprovedby()).as("check approvedby").isEqualTo(actual.getApprovedby()))
            .satisfies(e -> assertThat(e.getApproveddate()).as("check approveddate").isEqualTo(actual.getApproveddate()))
            .satisfies(e -> assertThat(e.getAdaptortype()).as("check adaptortype").isEqualTo(actual.getAdaptortype()))
            .satisfies(e -> assertThat(e.getDestination()).as("check destination").isEqualTo(actual.getDestination()))
            .satisfies(e -> assertThat(e.getThirdpartyresponse()).as("check thirdpartyresponse").isEqualTo(actual.getThirdpartyresponse()))
            .satisfies(e -> assertThat(e.getTelco()).as("check telco").isEqualTo(actual.getTelco()))
            .satisfies(e -> assertThat(e.getDescription()).as("check description").isEqualTo(actual.getDescription()))
            .satisfies(e -> assertThat(e.getRemarks()).as("check remarks").isEqualTo(actual.getRemarks()))
            .satisfies(e -> assertThat(e.getSessionid()).as("check sessionid").isEqualTo(actual.getSessionid()))
            .satisfies(e -> assertThat(e.getReworkby()).as("check reworkby").isEqualTo(actual.getReworkby()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertServiceManagementUpdatableRelationshipsEquals(ServiceManagement expected, ServiceManagement actual) {
        // empty method
    }
}
