package com.istl.app.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class MESSAGESSMSAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMESSAGESSMSAllPropertiesEquals(MESSAGESSMS expected, MESSAGESSMS actual) {
        assertMESSAGESSMSAutoGeneratedPropertiesEquals(expected, actual);
        assertMESSAGESSMSAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMESSAGESSMSAllUpdatablePropertiesEquals(MESSAGESSMS expected, MESSAGESSMS actual) {
        assertMESSAGESSMSUpdatableFieldsEquals(expected, actual);
        assertMESSAGESSMSUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMESSAGESSMSAutoGeneratedPropertiesEquals(MESSAGESSMS expected, MESSAGESSMS actual) {
        assertThat(expected)
            .as("Verify MESSAGESSMS auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMESSAGESSMSUpdatableFieldsEquals(MESSAGESSMS expected, MESSAGESSMS actual) {
        assertThat(expected)
            .as("Verify MESSAGESSMS relevant properties")
            .satisfies(e -> assertThat(e.gettRNDATETIME()).as("check tRNDATETIME").isEqualTo(actual.gettRNDATETIME()))
            .satisfies(e -> assertThat(e.getpHONENUMBER()).as("check pHONENUMBER").isEqualTo(actual.getpHONENUMBER()))
            .satisfies(e -> assertThat(e.gettRANSACTIONNO()).as("check tRANSACTIONNO").isEqualTo(actual.gettRANSACTIONNO()))
            .satisfies(e -> assertThat(e.getaCCOUNTNUMBER()).as("check aCCOUNTNUMBER").isEqualTo(actual.getaCCOUNTNUMBER()))
            .satisfies(e -> assertThat(e.getmESSAGE()).as("check mESSAGE").isEqualTo(actual.getmESSAGE()))
            .satisfies(e -> assertThat(e.getcHANNEL()).as("check cHANNEL").isEqualTo(actual.getcHANNEL()))
            .satisfies(e -> assertThat(e.gettRIALS()).as("check tRIALS").isEqualTo(actual.gettRIALS()))
            .satisfies(e -> assertThat(e.getpRIORITY()).as("check pRIORITY").isEqualTo(actual.getpRIORITY()))
            .satisfies(e -> assertThat(e.getrESPONSECODE()).as("check rESPONSECODE").isEqualTo(actual.getrESPONSECODE()))
            .satisfies(e -> assertThat(e.getrESPONSEMSG()).as("check rESPONSEMSG").isEqualTo(actual.getrESPONSEMSG()))
            .satisfies(e -> assertThat(e.getsENT()).as("check sENT").isEqualTo(actual.getsENT()))
            .satisfies(e -> assertThat(e.getdELIVERED()).as("check dELIVERED").isEqualTo(actual.getdELIVERED()))
            .satisfies(e -> assertThat(e.gettXNTYPE()).as("check tXNTYPE").isEqualTo(actual.gettXNTYPE()))
            .satisfies(e -> assertThat(e.geteRROREXCEPTION()).as("check eRROREXCEPTION").isEqualTo(actual.geteRROREXCEPTION()))
            .satisfies(e -> assertThat(e.getdATECREATED()).as("check dATECREATED").isEqualTo(actual.getdATECREATED()))
            .satisfies(e -> assertThat(e.getdATESENT()).as("check dATESENT").isEqualTo(actual.getdATESENT()))
            .satisfies(e -> assertThat(e.getrTPSREQTIME()).as("check rTPSREQTIME").isEqualTo(actual.getrTPSREQTIME()))
            .satisfies(e -> assertThat(e.getfXGENERATED()).as("check fXGENERATED").isEqualTo(actual.getfXGENERATED()))
            .satisfies(e -> assertThat(e.gettAXPROCESSED()).as("check tAXPROCESSED").isEqualTo(actual.gettAXPROCESSED()))
            .satisfies(e -> assertThat(e.getbATCHNUMBER()).as("check bATCHNUMBER").isEqualTo(actual.getbATCHNUMBER()))
            .satisfies(e -> assertThat(e.getbATCHNUMBERTAX()).as("check bATCHNUMBERTAX").isEqualTo(actual.getbATCHNUMBERTAX()))
            .satisfies(e -> assertThat(e.getrESPONSETIME()).as("check rESPONSETIME").isEqualTo(actual.getrESPONSETIME()))
            .satisfies(e -> assertThat(e.getpDUSEQID()).as("check pDUSEQID").isEqualTo(actual.getpDUSEQID()))
            .satisfies(e -> assertThat(e.getrEMARKS()).as("check rEMARKS").isEqualTo(actual.getrEMARKS()))
            .satisfies(e -> assertThat(e.getrESENDBY()).as("check rESENDBY").isEqualTo(actual.getrESENDBY()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMESSAGESSMSUpdatableRelationshipsEquals(MESSAGESSMS expected, MESSAGESSMS actual) {
        // empty method
    }
}
