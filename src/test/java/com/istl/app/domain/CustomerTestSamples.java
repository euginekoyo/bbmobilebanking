package com.istl.app.domain;

import com.istl.app.domain.mobileapp.Customer;
import java.util.Random;
import java.util.UUID;
import java.util.concurrent.atomic.AtomicLong;

public class CustomerTestSamples {

    private static final Random random = new Random();
    private static final AtomicLong longCount = new AtomicLong(random.nextInt() + (2 * Integer.MAX_VALUE));

    public static Customer getCustomerSample1() {
        return new Customer()
            .id(1L)
            .customername("customername1")
            .phonenumber("phonenumber1")
            .cardnumber("cardnumber1")
            .accountnumber("accountnumber1")
            .lang("lang1")
            .pin("pin1")
            .firstlogin("firstlogin1")
            .active("active1")
            .registered(1L)
            .cstdelete(1L)
            .alertenabled(1L)
            .remark("remark1")
            .imsi("imsi1")
            .partiallyregistered("partiallyregistered1")
            .approvedby("approvedby1")
            .declinedby("declinedby1")
            .checkerremarks("checkerremarks1")
            .postaladdress("postaladdress1")
            .residence("residence1")
            .createdby("createdby1")
            .emailaddress("emailaddress1")
            .identificationid("identificationid1")
            .aclinkinginstitution("aclinkinginstitution1")
            .deactivatedby("deactivatedby1")
            .phonenochangedby("phonenochangedby1")
            .originalphoneno("originalphoneno1")
            .newphoneno("newphoneno1")
            .resetinginstitution("resetinginstitution1")
            .pinresetremark("pinresetremark1")
            .resetby("resetby1")
            .unblockinginstitution("unblockinginstitution1")
            .pinblockby("pinblockby1")
            .pinblockremarks("pinblockremarks1")
            .blockinginstitution("blockinginstitution1")
            .pinunblockby("pinunblockby1")
            .loggedin(1L)
            .trials("trials1")
            .idtype("idtype1")
            .idnumber("idnumber1")
            .gender("gender1")
            .cif("cif1")
            .remarks("remarks1")
            .imsiresetby("imsiresetby1")
            .firstname("firstname1")
            .secondname("secondname1")
            .lastname("lastname1")
            .pinblocktime("pinblocktime1")
            .customerstatus("customerstatus1")
            .username("username1")
            .password("password1")
            .deviceid("deviceid1")
            .channel("channel1")
            .passresetby("passresetby1")
            .passblockby("passblockby1")
            .passresetremarks("passresetremarks1")
            .passblockremarks("passblockremarks1")
            .passunblockby("passunblockby1")
            .appactive(1L)
            .lastlogin("lastlogin1")
            .disableby("disableby1")
            .approvedisableby("approvedisableby1")
            .enableby("enableby1")
            .approvedenableby("approvedenableby1")
            .appfirstlogin("appfirstlogin1")
            .shorcuts("shorcuts1")
            .markedactivate("markedactivate1")
            .town("town1")
            .deletedby("deletedby1")
            .questionsasked("questionsasked1")
            .questionstrials("questionstrials1")
            .questionsanswered("questionsanswered1")
            .activatedby("activatedby1")
            .branchcode("branchcode1");
    }

    public static Customer getCustomerSample2() {
        return new Customer()
            .id(2L)
            .customername("customername2")
            .phonenumber("phonenumber2")
            .cardnumber("cardnumber2")
            .accountnumber("accountnumber2")
            .lang("lang2")
            .pin("pin2")
            .firstlogin("firstlogin2")
            .active("active2")
            .registered(2L)
            .cstdelete(2L)
            .alertenabled(2L)
            .remark("remark2")
            .imsi("imsi2")
            .partiallyregistered("partiallyregistered2")
            .approvedby("approvedby2")
            .declinedby("declinedby2")
            .checkerremarks("checkerremarks2")
            .postaladdress("postaladdress2")
            .residence("residence2")
            .createdby("createdby2")
            .emailaddress("emailaddress2")
            .identificationid("identificationid2")
            .aclinkinginstitution("aclinkinginstitution2")
            .deactivatedby("deactivatedby2")
            .phonenochangedby("phonenochangedby2")
            .originalphoneno("originalphoneno2")
            .newphoneno("newphoneno2")
            .resetinginstitution("resetinginstitution2")
            .pinresetremark("pinresetremark2")
            .resetby("resetby2")
            .unblockinginstitution("unblockinginstitution2")
            .pinblockby("pinblockby2")
            .pinblockremarks("pinblockremarks2")
            .blockinginstitution("blockinginstitution2")
            .pinunblockby("pinunblockby2")
            .loggedin(2L)
            .trials("trials2")
            .idtype("idtype2")
            .idnumber("idnumber2")
            .gender("gender2")
            .cif("cif2")
            .remarks("remarks2")
            .imsiresetby("imsiresetby2")
            .firstname("firstname2")
            .secondname("secondname2")
            .lastname("lastname2")
            .pinblocktime("pinblocktime2")
            .customerstatus("customerstatus2")
            .username("username2")
            .password("password2")
            .deviceid("deviceid2")
            .channel("channel2")
            .passresetby("passresetby2")
            .passblockby("passblockby2")
            .passresetremarks("passresetremarks2")
            .passblockremarks("passblockremarks2")
            .passunblockby("passunblockby2")
            .appactive(2L)
            .lastlogin("lastlogin2")
            .disableby("disableby2")
            .approvedisableby("approvedisableby2")
            .enableby("enableby2")
            .approvedenableby("approvedenableby2")
            .appfirstlogin("appfirstlogin2")
            .shorcuts("shorcuts2")
            .markedactivate("markedactivate2")
            .town("town2")
            .deletedby("deletedby2")
            .questionsasked("questionsasked2")
            .questionstrials("questionstrials2")
            .questionsanswered("questionsanswered2")
            .activatedby("activatedby2")
            .branchcode("branchcode2");
    }

    public static Customer getCustomerRandomSampleGenerator() {
        return new Customer()
            .id(longCount.incrementAndGet())
            .customername(UUID.randomUUID().toString())
            .phonenumber(UUID.randomUUID().toString())
            .cardnumber(UUID.randomUUID().toString())
            .accountnumber(UUID.randomUUID().toString())
            .lang(UUID.randomUUID().toString())
            .pin(UUID.randomUUID().toString())
            .firstlogin(UUID.randomUUID().toString())
            .active(UUID.randomUUID().toString())
            .registered(longCount.incrementAndGet())
            .cstdelete(longCount.incrementAndGet())
            .alertenabled(longCount.incrementAndGet())
            .remark(UUID.randomUUID().toString())
            .imsi(UUID.randomUUID().toString())
            .partiallyregistered(UUID.randomUUID().toString())
            .approvedby(UUID.randomUUID().toString())
            .declinedby(UUID.randomUUID().toString())
            .checkerremarks(UUID.randomUUID().toString())
            .postaladdress(UUID.randomUUID().toString())
            .residence(UUID.randomUUID().toString())
            .createdby(UUID.randomUUID().toString())
            .emailaddress(UUID.randomUUID().toString())
            .identificationid(UUID.randomUUID().toString())
            .aclinkinginstitution(UUID.randomUUID().toString())
            .deactivatedby(UUID.randomUUID().toString())
            .phonenochangedby(UUID.randomUUID().toString())
            .originalphoneno(UUID.randomUUID().toString())
            .newphoneno(UUID.randomUUID().toString())
            .resetinginstitution(UUID.randomUUID().toString())
            .pinresetremark(UUID.randomUUID().toString())
            .resetby(UUID.randomUUID().toString())
            .unblockinginstitution(UUID.randomUUID().toString())
            .pinblockby(UUID.randomUUID().toString())
            .pinblockremarks(UUID.randomUUID().toString())
            .blockinginstitution(UUID.randomUUID().toString())
            .pinunblockby(UUID.randomUUID().toString())
            .loggedin(longCount.incrementAndGet())
            .trials(UUID.randomUUID().toString())
            .idtype(UUID.randomUUID().toString())
            .idnumber(UUID.randomUUID().toString())
            .gender(UUID.randomUUID().toString())
            .cif(UUID.randomUUID().toString())
            .remarks(UUID.randomUUID().toString())
            .imsiresetby(UUID.randomUUID().toString())
            .firstname(UUID.randomUUID().toString())
            .secondname(UUID.randomUUID().toString())
            .lastname(UUID.randomUUID().toString())
            .pinblocktime(UUID.randomUUID().toString())
            .customerstatus(UUID.randomUUID().toString())
            .username(UUID.randomUUID().toString())
            .password(UUID.randomUUID().toString())
            .deviceid(UUID.randomUUID().toString())
            .channel(UUID.randomUUID().toString())
            .passresetby(UUID.randomUUID().toString())
            .passblockby(UUID.randomUUID().toString())
            .passresetremarks(UUID.randomUUID().toString())
            .passblockremarks(UUID.randomUUID().toString())
            .passunblockby(UUID.randomUUID().toString())
            .appactive(longCount.incrementAndGet())
            .lastlogin(UUID.randomUUID().toString())
            .disableby(UUID.randomUUID().toString())
            .approvedisableby(UUID.randomUUID().toString())
            .enableby(UUID.randomUUID().toString())
            .approvedenableby(UUID.randomUUID().toString())
            .appfirstlogin(UUID.randomUUID().toString())
            .shorcuts(UUID.randomUUID().toString())
            .markedactivate(UUID.randomUUID().toString())
            .town(UUID.randomUUID().toString())
            .deletedby(UUID.randomUUID().toString())
            .questionsasked(UUID.randomUUID().toString())
            .questionstrials(UUID.randomUUID().toString())
            .questionsanswered(UUID.randomUUID().toString())
            .activatedby(UUID.randomUUID().toString())
            .branchcode(UUID.randomUUID().toString());
    }
}
