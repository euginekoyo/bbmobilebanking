package com.istl.app.domain;

import static org.assertj.core.api.Assertions.assertThat;

import com.istl.app.domain.mobileapp.Limits;

public class LimitsAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLimitsAllPropertiesEquals(Limits expected, Limits actual) {
        assertLimitsAutoGeneratedPropertiesEquals(expected, actual);
        assertLimitsAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLimitsAllUpdatablePropertiesEquals(Limits expected, Limits actual) {
        assertLimitsUpdatableFieldsEquals(expected, actual);
        assertLimitsUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLimitsAutoGeneratedPropertiesEquals(Limits expected, Limits actual) {
        assertThat(expected)
            .as("Verify Limits auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLimitsUpdatableFieldsEquals(Limits expected, Limits actual) {
        assertThat(expected)
            .as("Verify Limits relevant properties")
            .satisfies(e -> assertThat(e.getTransactiontype()).as("check transactiontype").isEqualTo(actual.getTransactiontype()))
            .satisfies(e -> assertThat(e.getProcode()).as("check procode").isEqualTo(actual.getProcode()))
            .satisfies(e -> assertThat(e.getChannel()).as("check channel").isEqualTo(actual.getChannel()))
            .satisfies(e -> assertThat(e.getTransactionlimit()).as("check transactionlimit").isEqualTo(actual.getTransactionlimit()))
            .satisfies(e -> assertThat(e.getDailylimit()).as("check dailylimit").isEqualTo(actual.getDailylimit()))
            .satisfies(e -> assertThat(e.getRegisteredby()).as("check registeredby").isEqualTo(actual.getRegisteredby()))
            .satisfies(e -> assertThat(e.getRegistereddate()).as("check registereddate").isEqualTo(actual.getRegistereddate()))
            .satisfies(e -> assertThat(e.getApproved()).as("check approved").isEqualTo(actual.getApproved()))
            .satisfies(e -> assertThat(e.getApprovedby()).as("check approvedby").isEqualTo(actual.getApprovedby()))
            .satisfies(e -> assertThat(e.getApproveddate()).as("check approveddate").isEqualTo(actual.getApproveddate()))
            .satisfies(e -> assertThat(e.getUpdatedby()).as("check updatedby").isEqualTo(actual.getUpdatedby()))
            .satisfies(e -> assertThat(e.getUpdateddate()).as("check updateddate").isEqualTo(actual.getUpdateddate()))
            .satisfies(e -> assertThat(e.getRework()).as("check rework").isEqualTo(actual.getRework()))
            .satisfies(e -> assertThat(e.getReworkby()).as("check reworkby").isEqualTo(actual.getReworkby()))
            .satisfies(e -> assertThat(e.getSessionid()).as("check sessionid").isEqualTo(actual.getSessionid()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLimitsUpdatableRelationshipsEquals(Limits expected, Limits actual) {
        // empty method
    }
}
