package com.istl.app.domain;

import static org.assertj.core.api.Assertions.assertThat;

import com.istl.app.domain.mobileapp.Transactions;

public class TransactionsAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTransactionsAllPropertiesEquals(Transactions expected, Transactions actual) {
        assertTransactionsAutoGeneratedPropertiesEquals(expected, actual);
        assertTransactionsAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTransactionsAllUpdatablePropertiesEquals(Transactions expected, Transactions actual) {
        assertTransactionsUpdatableFieldsEquals(expected, actual);
        assertTransactionsUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTransactionsAutoGeneratedPropertiesEquals(Transactions expected, Transactions actual) {
        assertThat(expected)
            .as("Verify Transactions auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTransactionsUpdatableFieldsEquals(Transactions expected, Transactions actual) {
        assertThat(expected)
            .as("Verify Transactions relevant properties")
            .satisfies(e -> assertThat(e.getProcessed()).as("check processed").isEqualTo(actual.getProcessed()))
            .satisfies(e -> assertThat(e.getIncomingbitmap()).as("check incomingbitmap").isEqualTo(actual.getIncomingbitmap()))
            .satisfies(e -> assertThat(e.getOutgoingbitmap()).as("check outgoingbitmap").isEqualTo(actual.getOutgoingbitmap()))
            .satisfies(e -> assertThat(e.getInmessage()).as("check inmessage").isEqualTo(actual.getInmessage()))
            .satisfies(e -> assertThat(e.getMessagetocbs()).as("check messagetocbs").isEqualTo(actual.getMessagetocbs()))
            .satisfies(e -> assertThat(e.getMessagefromcbs()).as("check messagefromcbs").isEqualTo(actual.getMessagefromcbs()))
            .satisfies(e -> assertThat(e.getCbsprocess()).as("check cbsprocess").isEqualTo(actual.getCbsprocess()))
            .satisfies(e -> assertThat(e.getCbsonline()).as("check cbsonline").isEqualTo(actual.getCbsonline()))
            .satisfies(e -> assertThat(e.getCbsresponse()).as("check cbsresponse").isEqualTo(actual.getCbsresponse()))
            .satisfies(e -> assertThat(e.getResponsemessage()).as("check responsemessage").isEqualTo(actual.getResponsemessage()))
            .satisfies(e -> assertThat(e.getResponsesent()).as("check responsesent").isEqualTo(actual.getResponsesent()))
            .satisfies(e -> assertThat(e.getChannel()).as("check channel").isEqualTo(actual.getChannel()))
            .satisfies(e -> assertThat(e.getOriginaldata()).as("check originaldata").isEqualTo(actual.getOriginaldata()))
            .satisfies(e -> assertThat(e.getField39resp()).as("check field39resp").isEqualTo(actual.getField39resp()))
            .satisfies(e -> assertThat(e.getNarration()).as("check narration").isEqualTo(actual.getNarration()))
            .satisfies(e -> assertThat(e.getAuthorised()).as("check authorised").isEqualTo(actual.getAuthorised()))
            .satisfies(e -> assertThat(e.getBranchcode()).as("check branchcode").isEqualTo(actual.getBranchcode()))
            .satisfies(e -> assertThat(e.getField39original()).as("check field39original").isEqualTo(actual.getField39original()))
            .satisfies(e -> assertThat(e.getMessageclass()).as("check messageclass").isEqualTo(actual.getMessageclass()))
            .satisfies(e -> assertThat(e.getTxncode()).as("check txncode").isEqualTo(actual.getTxncode()))
            .satisfies(e -> assertThat(e.getCurrcode()).as("check currcode").isEqualTo(actual.getCurrcode()))
            .satisfies(e -> assertThat(e.getDevice()).as("check device").isEqualTo(actual.getDevice()))
            .satisfies(e -> assertThat(e.getBranch2()).as("check branch2").isEqualTo(actual.getBranch2()))
            .satisfies(e -> assertThat(e.getLongerbranch()).as("check longerbranch").isEqualTo(actual.getLongerbranch()))
            .satisfies(e -> assertThat(e.getDatex()).as("check datex").isEqualTo(actual.getDatex()))
            .satisfies(e -> assertThat(e.getTimex()).as("check timex").isEqualTo(actual.getTimex()))
            .satisfies(e -> assertThat(e.getPosted()).as("check posted").isEqualTo(actual.getPosted()))
            .satisfies(e -> assertThat(e.getAttempts()).as("check attempts").isEqualTo(actual.getAttempts()))
            .satisfies(e -> assertThat(e.getOriginaldata2()).as("check originaldata2").isEqualTo(actual.getOriginaldata2()))
            .satisfies(e -> assertThat(e.getCommission()).as("check commission").isEqualTo(actual.getCommission()))
            .satisfies(e -> assertThat(e.getResponsecreated()).as("check responsecreated").isEqualTo(actual.getResponsecreated()))
            .satisfies(e -> assertThat(e.getOnline()).as("check online").isEqualTo(actual.getOnline()))
            .satisfies(e -> assertThat(e.getOriginaldata3()).as("check originaldata3").isEqualTo(actual.getOriginaldata3()))
            .satisfies(e -> assertThat(e.getToswitch()).as("check toswitch").isEqualTo(actual.getToswitch()))
            .satisfies(e -> assertThat(e.getFromswitch()).as("check fromswitch").isEqualTo(actual.getFromswitch()))
            .satisfies(e -> assertThat(e.getTocbs()).as("check tocbs").isEqualTo(actual.getTocbs()))
            .satisfies(e -> assertThat(e.getFromcbs()).as("check fromcbs").isEqualTo(actual.getFromcbs()))
            .satisfies(e -> assertThat(e.getPostinglegs()).as("check postinglegs").isEqualTo(actual.getPostinglegs()))
            .satisfies(e -> assertThat(e.getCommissiontxncode()).as("check commissiontxncode").isEqualTo(actual.getCommissiontxncode()))
            .satisfies(e -> assertThat(e.getHostref()).as("check hostref").isEqualTo(actual.getHostref()))
            .satisfies(e -> assertThat(e.getRequestcreated()).as("check requestcreated").isEqualTo(actual.getRequestcreated()))
            .satisfies(e -> assertThat(e.getRequestmessage()).as("check requestmessage").isEqualTo(actual.getRequestmessage()))
            .satisfies(e -> assertThat(e.getOutgoingbitmapflex()).as("check outgoingbitmapflex").isEqualTo(actual.getOutgoingbitmapflex()))
            .satisfies(e -> assertThat(e.getIncomingbitmapflex()).as("check incomingbitmapflex").isEqualTo(actual.getIncomingbitmapflex()))
            .satisfies(e -> assertThat(e.getRequestsent()).as("check requestsent").isEqualTo(actual.getRequestsent()))
            .satisfies(e -> assertThat(e.getMinicbs()).as("check minicbs").isEqualTo(actual.getMinicbs()))
            .satisfies(e -> assertThat(e.getReversed()).as("check reversed").isEqualTo(actual.getReversed()))
            .satisfies(e -> assertThat(e.getOfflinesenttohost()).as("check offlinesenttohost").isEqualTo(actual.getOfflinesenttohost()))
            .satisfies(e -> assertThat(e.getOfflineresponse()).as("check offlineresponse").isEqualTo(actual.getOfflineresponse()))
            .satisfies(e -> assertThat(e.getSourceLongerface()).as("check sourceLongerface").isEqualTo(actual.getSourceLongerface()))
            .satisfies(e -> assertThat(e.getMtirrn()).as("check mtirrn").isEqualTo(actual.getMtirrn()))
            .satisfies(e -> assertThat(e.getHostresponsecode()).as("check hostresponsecode").isEqualTo(actual.getHostresponsecode()))
            .satisfies(e -> assertThat(e.getField48()).as("check field48").isEqualTo(actual.getField48()))
            .satisfies(e -> assertThat(e.getSource()).as("check source").isEqualTo(actual.getSource()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTransactionsUpdatableRelationshipsEquals(Transactions expected, Transactions actual) {
        // empty method
    }
}
