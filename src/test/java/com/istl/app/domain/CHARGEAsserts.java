package com.istl.app.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class CHARGEAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCHARGEAllPropertiesEquals(CHARGE expected, CHARGE actual) {
        assertCHARGEAutoGeneratedPropertiesEquals(expected, actual);
        assertCHARGEAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCHARGEAllUpdatablePropertiesEquals(CHARGE expected, CHARGE actual) {
        assertCHARGEUpdatableFieldsEquals(expected, actual);
        assertCHARGEUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCHARGEAutoGeneratedPropertiesEquals(CHARGE expected, CHARGE actual) {
        assertThat(expected)
            .as("Verify CHARGE auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCHARGEUpdatableFieldsEquals(CHARGE expected, CHARGE actual) {
        assertThat(expected)
            .as("Verify CHARGE relevant properties")
            .satisfies(e -> assertThat(e.gettXNTYPE()).as("check tXNTYPE").isEqualTo(actual.gettXNTYPE()))
            .satisfies(e -> assertThat(e.getfEEMODE()).as("check fEEMODE").isEqualTo(actual.getfEEMODE()))
            .satisfies(e -> assertThat(e.getaMOUNT()).as("check aMOUNT").isEqualTo(actual.getaMOUNT()))
            .satisfies(e -> assertThat(e.getdATECREATED()).as("check dATECREATED").isEqualTo(actual.getdATECREATED()))
            .satisfies(e -> assertThat(e.getcREATEDBY()).as("check cREATEDBY").isEqualTo(actual.getcREATEDBY()))
            .satisfies(e -> assertThat(e.getaPPROVED()).as("check aPPROVED").isEqualTo(actual.getaPPROVED()))
            .satisfies(e -> assertThat(e.getaPPROVEDBY()).as("check aPPROVEDBY").isEqualTo(actual.getaPPROVEDBY()))
            .satisfies(e -> assertThat(e.getcHANNEL()).as("check cHANNEL").isEqualTo(actual.getcHANNEL()))
            .satisfies(e -> assertThat(e.gettXNCODE()).as("check tXNCODE").isEqualTo(actual.gettXNCODE()))
            .satisfies(e -> assertThat(e.getdESCRIPTION()).as("check dESCRIPTION").isEqualTo(actual.getdESCRIPTION()))
            .satisfies(e -> assertThat(e.getaPPROVEDDATE()).as("check aPPROVEDDATE").isEqualTo(actual.getaPPROVEDDATE()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCHARGEUpdatableRelationshipsEquals(CHARGE expected, CHARGE actual) {
        assertThat(expected)
            .as("Verify CHARGE relationships")
            .satisfies(e -> assertThat(e.getcHARGERANGES()).as("check cHARGERANGES").isEqualTo(actual.getcHARGERANGES()))
            .satisfies(e -> assertThat(e.getrANGE()).as("check rANGE").isEqualTo(actual.getrANGE()));
    }
}
