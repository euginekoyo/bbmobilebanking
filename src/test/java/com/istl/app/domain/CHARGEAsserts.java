package com.istl.app.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ChargeAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertChargeAllPropertiesEquals(Charge expected, Charge actual) {
        assertChargeAutoGeneratedPropertiesEquals(expected, actual);
        assertChargeAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertChargeAllUpdatablePropertiesEquals(Charge expected, Charge actual) {
        assertChargeUpdatableFieldsEquals(expected, actual);
        assertChargeUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertChargeAutoGeneratedPropertiesEquals(Charge expected, Charge actual) {
        assertThat(expected)
            .as("Verify Charge auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertChargeUpdatableFieldsEquals(Charge expected, Charge actual) {
        assertThat(expected)
            .as("Verify Charge relevant properties")
            .satisfies(e -> assertThat(e.getTxntype()).as("check txntype").isEqualTo(actual.getTxntype()))
            .satisfies(e -> assertThat(e.getFeemode()).as("check feemode").isEqualTo(actual.getFeemode()))
            .satisfies(e -> assertThat(e.getAmount()).as("check amount").isEqualTo(actual.getAmount()))
            .satisfies(e -> assertThat(e.getDatecreated()).as("check datecreated").isEqualTo(actual.getDatecreated()))
            .satisfies(e -> assertThat(e.getCreatedby()).as("check createdby").isEqualTo(actual.getCreatedby()))
            .satisfies(e -> assertThat(e.getApproved()).as("check approved").isEqualTo(actual.getApproved()))
            .satisfies(e -> assertThat(e.getApprovedby()).as("check approvedby").isEqualTo(actual.getApprovedby()))
            .satisfies(e -> assertThat(e.getChannel()).as("check channel").isEqualTo(actual.getChannel()))
            .satisfies(e -> assertThat(e.getTxncode()).as("check txncode").isEqualTo(actual.getTxncode()))
            .satisfies(e -> assertThat(e.getDescription()).as("check description").isEqualTo(actual.getDescription()))
            .satisfies(e -> assertThat(e.getApproveddate()).as("check approveddate").isEqualTo(actual.getApproveddate()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertChargeUpdatableRelationshipsEquals(Charge expected, Charge actual) {
        assertThat(expected)
            .as("Verify Charge relationships")
            .satisfies(e -> assertThat(e.getChargeRange()).as("check chargeRange").isEqualTo(actual.getChargeRange()))
            .satisfies(e -> assertThat(e.getRange()).as("check range").isEqualTo(actual.getRange()));
    }
}
