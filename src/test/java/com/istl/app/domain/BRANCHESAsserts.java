package com.istl.app.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class BRANCHESAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBRANCHESAllPropertiesEquals(BRANCHES expected, BRANCHES actual) {
        assertBRANCHESAutoGeneratedPropertiesEquals(expected, actual);
        assertBRANCHESAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBRANCHESAllUpdatablePropertiesEquals(BRANCHES expected, BRANCHES actual) {
        assertBRANCHESUpdatableFieldsEquals(expected, actual);
        assertBRANCHESUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBRANCHESAutoGeneratedPropertiesEquals(BRANCHES expected, BRANCHES actual) {
        assertThat(expected)
            .as("Verify BRANCHES auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBRANCHESUpdatableFieldsEquals(BRANCHES expected, BRANCHES actual) {
        assertThat(expected)
            .as("Verify BRANCHES relevant properties")
            .satisfies(e -> assertThat(e.getbRANCHNAME()).as("check bRANCHNAME").isEqualTo(actual.getbRANCHNAME()))
            .satisfies(e -> assertThat(e.getbRANCHCODE()).as("check bRANCHCODE").isEqualTo(actual.getbRANCHCODE()))
            .satisfies(e -> assertThat(e.getaPPROVED()).as("check aPPROVED").isEqualTo(actual.getaPPROVED()))
            .satisfies(e -> assertThat(e.geteMAIL()).as("check eMAIL").isEqualTo(actual.geteMAIL()))
            .satisfies(e -> assertThat(e.getaDDRESS()).as("check aDDRESS").isEqualTo(actual.getaDDRESS()))
            .satisfies(e -> assertThat(e.getpHONE()).as("check pHONE").isEqualTo(actual.getpHONE()))
            .satisfies(e -> assertThat(e.getlOCATION()).as("check lOCATION").isEqualTo(actual.getlOCATION()))
            .satisfies(e -> assertThat(e.getcONTACTPERSON()).as("check cONTACTPERSON").isEqualTo(actual.getcONTACTPERSON()))
            .satisfies(e -> assertThat(e.getrEMARKS()).as("check rEMARKS").isEqualTo(actual.getrEMARKS()))
            .satisfies(e -> assertThat(e.getcREATEDBY()).as("check cREATEDBY").isEqualTo(actual.getcREATEDBY()))
            .satisfies(e -> assertThat(e.getcREATEDON()).as("check cREATEDON").isEqualTo(actual.getcREATEDON()))
            .satisfies(e -> assertThat(e.getaPPROVEDBY()).as("check aPPROVEDBY").isEqualTo(actual.getaPPROVEDBY()))
            .satisfies(e -> assertThat(e.getaPPROVEDON()).as("check aPPROVEDON").isEqualTo(actual.getaPPROVEDON()))
            .satisfies(e -> assertThat(e.getcHECKERREMARKS()).as("check cHECKERREMARKS").isEqualTo(actual.getcHECKERREMARKS()))
            .satisfies(e -> assertThat(e.getdELETEDBY()).as("check dELETEDBY").isEqualTo(actual.getdELETEDBY()))
            .satisfies(e -> assertThat(e.getdELETEDON()).as("check dELETEDON").isEqualTo(actual.getdELETEDON()))
            .satisfies(e -> assertThat(e.getdELETEREMARKS()).as("check dELETEREMARKS").isEqualTo(actual.getdELETEREMARKS()))
            .satisfies(e -> assertThat(e.getdELETED()).as("check dELETED").isEqualTo(actual.getdELETED()))
            .satisfies(e -> assertThat(e.getdECLINED()).as("check dECLINED").isEqualTo(actual.getdECLINED()))
            .satisfies(e -> assertThat(e.getdECLINEDDON()).as("check dECLINEDDON").isEqualTo(actual.getdECLINEDDON()))
            .satisfies(e -> assertThat(e.getdECLINEDBY()).as("check dECLINEDBY").isEqualTo(actual.getdECLINEDBY()))
            .satisfies(e -> assertThat(e.getsESSIONID()).as("check sESSIONID").isEqualTo(actual.getsESSIONID()))
            .satisfies(e -> assertThat(e.getrEWORKED()).as("check rEWORKED").isEqualTo(actual.getrEWORKED()))
            .satisfies(e -> assertThat(e.getrEWORKEDBY()).as("check rEWORKEDBY").isEqualTo(actual.getrEWORKEDBY()))
            .satisfies(e -> assertThat(e.getrEWORKEDON()).as("check rEWORKEDON").isEqualTo(actual.getrEWORKEDON()))
            .satisfies(e -> assertThat(e.getdISTRICT()).as("check dISTRICT").isEqualTo(actual.getdISTRICT()))
            .satisfies(e -> assertThat(e.getrEGION()).as("check rEGION").isEqualTo(actual.getrEGION()))
            .satisfies(e -> assertThat(e.getrEGIONNAME()).as("check rEGIONNAME").isEqualTo(actual.getrEGIONNAME()))
            .satisfies(e -> assertThat(e.getrEPORTING()).as("check rEPORTING").isEqualTo(actual.getrEPORTING()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBRANCHESUpdatableRelationshipsEquals(BRANCHES expected, BRANCHES actual) {
        // empty method
    }
}
