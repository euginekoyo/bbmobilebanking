package com.istl.app.domain;

import static org.assertj.core.api.Assertions.assertThat;

import com.istl.app.domain.mobileapp.MessagesSms;

public class MessagesSmsAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMessagesSmsAllPropertiesEquals(MessagesSms expected, MessagesSms actual) {
        assertMessagesSmsAutoGeneratedPropertiesEquals(expected, actual);
        assertMessagesSmsAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMessagesSmsAllUpdatablePropertiesEquals(MessagesSms expected, MessagesSms actual) {
        assertMessagesSmsUpdatableFieldsEquals(expected, actual);
        assertMessagesSmsUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMessagesSmsAutoGeneratedPropertiesEquals(MessagesSms expected, MessagesSms actual) {
        assertThat(expected)
            .as("Verify MessagesSms auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMessagesSmsUpdatableFieldsEquals(MessagesSms expected, MessagesSms actual) {
        assertThat(expected)
            .as("Verify MessagesSms relevant properties")
            .satisfies(e -> assertThat(e.getTrndatetime()).as("check trndatetime").isEqualTo(actual.getTrndatetime()))
            .satisfies(e -> assertThat(e.getPhonenumber()).as("check phonenumber").isEqualTo(actual.getPhonenumber()))
            .satisfies(e -> assertThat(e.getTransactionno()).as("check transactionno").isEqualTo(actual.getTransactionno()))
            .satisfies(e -> assertThat(e.getAccountnumber()).as("check accountnumber").isEqualTo(actual.getAccountnumber()))
            .satisfies(e -> assertThat(e.getMessage()).as("check message").isEqualTo(actual.getMessage()))
            .satisfies(e -> assertThat(e.getChannel()).as("check channel").isEqualTo(actual.getChannel()))
            .satisfies(e -> assertThat(e.getTrials()).as("check trials").isEqualTo(actual.getTrials()))
            .satisfies(e -> assertThat(e.getPriority()).as("check priority").isEqualTo(actual.getPriority()))
            .satisfies(e -> assertThat(e.getResponsecode()).as("check responsecode").isEqualTo(actual.getResponsecode()))
            .satisfies(e -> assertThat(e.getResponsemsg()).as("check responsemsg").isEqualTo(actual.getResponsemsg()))
            .satisfies(e -> assertThat(e.getSent()).as("check sent").isEqualTo(actual.getSent()))
            .satisfies(e -> assertThat(e.getDelivered()).as("check delivered").isEqualTo(actual.getDelivered()))
            .satisfies(e -> assertThat(e.getTxntype()).as("check txntype").isEqualTo(actual.getTxntype()))
            .satisfies(e -> assertThat(e.getErrorexception()).as("check errorexception").isEqualTo(actual.getErrorexception()))
            .satisfies(e -> assertThat(e.getDatecreated()).as("check datecreated").isEqualTo(actual.getDatecreated()))
            .satisfies(e -> assertThat(e.getDatesent()).as("check datesent").isEqualTo(actual.getDatesent()))
            .satisfies(e -> assertThat(e.getRtpsreqtime()).as("check rtpsreqtime").isEqualTo(actual.getRtpsreqtime()))
            .satisfies(e -> assertThat(e.getFxgenerated()).as("check fxgenerated").isEqualTo(actual.getFxgenerated()))
            .satisfies(e -> assertThat(e.getTaxprocessed()).as("check taxprocessed").isEqualTo(actual.getTaxprocessed()))
            .satisfies(e -> assertThat(e.getBatchnumber()).as("check batchnumber").isEqualTo(actual.getBatchnumber()))
            .satisfies(e -> assertThat(e.getBatchnumbertax()).as("check batchnumbertax").isEqualTo(actual.getBatchnumbertax()))
            .satisfies(e -> assertThat(e.getResponsetime()).as("check responsetime").isEqualTo(actual.getResponsetime()))
            .satisfies(e -> assertThat(e.getPduseqid()).as("check pduseqid").isEqualTo(actual.getPduseqid()))
            .satisfies(e -> assertThat(e.getRemarks()).as("check remarks").isEqualTo(actual.getRemarks()))
            .satisfies(e -> assertThat(e.getResendby()).as("check resendby").isEqualTo(actual.getResendby()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMessagesSmsUpdatableRelationshipsEquals(MessagesSms expected, MessagesSms actual) {
        // empty method
    }
}
